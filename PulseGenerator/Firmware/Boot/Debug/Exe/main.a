;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;? Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/8/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;#include "main.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "system.h"
;#include "protocol.h"
;#include <iobits.h>
;
;/* definitions for SPM control */
;#define	SPMCR_REG	SPMCSR
;#asm
;PCODE: $0000000D VOL: 0
     #define WR_SPMCR_REG_R22 out 0x37,r22
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0020 #endasm
;
;#define _ENABLE_RWW_SECTION() __DataToR0ByteToSPMCR_SPM( 0x00, 0x11 )
;#define _WAIT_FOR_SPM() while( SPMCR_REG & (1<<SELFPRGEN) );
;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl);
;
;// Declare your global variables here
;
;char hw_version = 0;
;char fw_version[] = "0.0.0";

	.DSEG
;
;serial_command_t request;
;serial_command_t respond;
;
;unsigned char get_status = GET_STATUS_COMPLETE;
;unsigned char len = 0;
;
;upgrade_page_request_t upgrade_page_request;
;
;bool isUpgrade = true;
;
;void main(void)
; 0000 0036 {

	.CSEG
;PCODE: $00000010 VOL: 0
; 0000 0037     // Declare your local variables here
; 0000 0038     unsigned char d = 0;
; 0000 0039     system_init();
;	d -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 003A 
; 0000 003B     for(d = 0; d<5; d++){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003C         PORTB.5 = 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003D         delay_ms(200);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003E         PORTB.5 = 1;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003F         delay_ms(200);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0040     }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0041 
; 0000 0042     // Global enable interrupts
; 0000 0043     #asm("sei")
;PCODE: $0000002C VOL: 0
	sei
;PCODE: $0000002D VOL: 0
; 0000 0044     while (1)
;PCODE: $0000002E VOL: 0
; 0000 0045     {
; 0000 0046         if(getCommand()){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0047             process_request();
;PCODE: $00000032 VOL: 0
; 0000 0048 
; 0000 0049             #asm("cli")
;PCODE: $00000033 VOL: 0
	cli
;PCODE: $00000034 VOL: 0
; 0000 004A             rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004B             #asm("sei")
;PCODE: $00000039 VOL: 0
	sei
;PCODE: $0000003A VOL: 0
; 0000 004C         }
; 0000 004D 
; 0000 004E         if(!isUpgrade){
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004F             #asm("cli")
;PCODE: $0000003E VOL: 0
	cli
;PCODE: $0000003F VOL: 0
; 0000 0050 
; 0000 0051             // Jump to application
; 0000 0052 //            #asm
; 0000 0053 //            LDI     R30, 0x00
; 0000 0054 //            LDI     R31, 0x00
; 0000 0055 //            IJMP               ;Jump to address 0x0000
; 0000 0056 //            #endasm
; 0000 0057             #pragma optsize-
; 0000 0058             // will use the interrupt vectors from the application section
; 0000 0059             MCUCR=(1<<IVCE);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005A             MCUCR=(0<<IVSEL) | (0<<IVCE);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005B             #ifdef _OPTIMIZE_SIZE_
; 0000 005C             #pragma optsize+
; 0000 005D             #endif
; 0000 005E 
; 0000 005F             // start execution from address 0
; 0000 0060             #asm("jmp 0")
;PCODE: $00000044 VOL: 0
	jmp 0
;PCODE: $00000045 VOL: 0
; 0000 0061         }
; 0000 0062         delay_ms(5);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0063     }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0064 }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;
;bool getCommand(){
; 0000 0066 _Bool getCommand(){
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0067      // Place your code here
; 0000 0068       if(get_status == GET_STATUS_COMPLETE && rx_counter0 >= 7){
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0069          if(getchar() == 0xFF){
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 006A             if(getchar() == 0x55){
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 006B                len = getchar();
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 006C                if(len <= 157){
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 006D                   get_status = GET_STATUS_GETTING;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 006E 
; 0000 006F                }
; 0000 0070             }else{
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0071                #asm("cli")
;PCODE: $0000006A VOL: 0
	cli
;PCODE: $0000006B VOL: 0
; 0000 0072                 rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0073                #asm("sei")
;PCODE: $00000070 VOL: 0
	sei
;PCODE: $00000071 VOL: 0
; 0000 0074             }
;PCODE: $00000072 VOL: 0
; 0000 0075          }else{
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0076             #asm("cli")
;PCODE: $00000075 VOL: 0
	cli
;PCODE: $00000076 VOL: 0
; 0000 0077             rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0078             #asm("sei")
;PCODE: $0000007B VOL: 0
	sei
;PCODE: $0000007C VOL: 0
; 0000 0079          }
;PCODE: $0000007D VOL: 0
; 0000 007A       }
; 0000 007B 
; 0000 007C       if(get_status == GET_STATUS_GETTING){
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 007D          if(rx_counter0 >= len - 1){
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007E             memcpy(&request, &rx_buffer0, len + 2);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 007F             get_status =  GET_STATUS_COMPLETE;
;PCODE: $00000092 VOL: 0
; 0000 0080 
; 0000 0081             return true;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0082          }
; 0000 0083       }
;PCODE: $00000095 VOL: 0
; 0000 0084 
; 0000 0085       return false;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0086 }
;PCODE: $00000099 VOL: 0
;
;void process_request(){
; 0000 0088 void process_request(){
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0089    unsigned char len = request.len;
; 0000 008A 
; 0000 008B    if(checksum(&request.len, len) != 0){
;PCODE: $0000009C VOL: 0
;	len -> R17
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 008C       response_error_checksum();
;PCODE: $000000A7 VOL: 0
; 0000 008D    }else{
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008E       execute_cmd();
;PCODE: $000000AA VOL: 0
; 0000 008F    }
;PCODE: $000000AB VOL: 0
; 0000 0090 }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;
;unsigned char checksum(unsigned char *dat, unsigned char len){
; 0000 0092 unsigned char checksum(unsigned char *dat, unsigned char len){
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0093    unsigned char ck  = 0;
; 0000 0094    unsigned char i = 0;
; 0000 0095 
; 0000 0096    for(i = 0; i<len; i++){
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;	*dat -> Y+3
;	len -> Y+2
;	ck -> R17
;	i -> R16
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0097       ck += *(dat + i);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0098    }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0099 
; 0000 009A    return ck;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 009B }
;PCODE: $000000D4 VOL: 0
;
;void response_error_checksum(){
; 0000 009D void response_error_checksum(){
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 009E     unsigned char status = STATUS_ERROR_CHECKSUM;
; 0000 009F     send_respond((char *)&status, sizeof(status));
;PCODE: $000000D7 VOL: 0
;	status -> R17
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00A0 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;void execute_cmd(){
; 0000 00A2 void execute_cmd(){
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00A3     unsigned char status;
; 0000 00A4     switch(request.opcode){
;PCODE: $000000E9 VOL: 0
;	status -> R17
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00A5     case CMD_READ_VERSION:
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A6         process_read_version();
;PCODE: $000000EF VOL: 0
; 0000 00A7         break;
;PCODE: $000000F0 VOL: 0
; 0000 00A8     case CMD_UPGRADE_START:
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00A9         process_upgrade_start();
;PCODE: $000000F4 VOL: 0
; 0000 00AA         break;
;PCODE: $000000F5 VOL: 0
; 0000 00AB     case CMD_UPGRADE_PAGE:
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00AC         process_upgrade_page();
;PCODE: $000000F9 VOL: 0
; 0000 00AD         break;
;PCODE: $000000FA VOL: 0
; 0000 00AE     case CMD_UPGRADE_FINISH:
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00AF         process_upgrade_finish();
;PCODE: $000000FE VOL: 0
; 0000 00B0         break;
;PCODE: $000000FF VOL: 0
; 0000 00B1     default:
;PCODE: $00000100 VOL: 0
; 0000 00B2         status = STATUS_UNSUPPORT;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B3         send_respond((char *)&status, sizeof(status));
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00B4         break;
;PCODE: $0000010D VOL: 0
; 0000 00B5     }
;PCODE: $0000010E VOL: 0
; 0000 00B6 }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;
;void process_upgrade_start(){
; 0000 00B8 void process_upgrade_start(){
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00B9     unsigned char status = STATUS_SUCCESS;
; 0000 00BA     send_respond((char*)&status, sizeof(status));
;PCODE: $00000114 VOL: 0
;	status -> R17
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00BB }
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;
;void process_read_version(){
; 0000 00BD void process_read_version(){
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00BE     char *c;
; 0000 00BF     char str[] = "0.0.0";
; 0000 00C0     respond_read_version_t res;
; 0000 00C1     unsigned char hw0 = PIND.6;
; 0000 00C2     unsigned char hw1 = PIND.7;
; 0000 00C3     //hw_version = (hw1 << 1) | (hw0 << 0);
; 0000 00C4 
; 0000 00C5     res.status = STATUS_SUCCESS;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;	*c -> R16,R17
;	str -> Y+15
;	res -> Y+4
;	hw0 -> R19
;	hw1 -> R18
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00C6     hw_version = hw1 * 2 + hw0 + 1;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00C7     strncpy(res.hw_version, str, 5);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00C8     res.hw_version[0] = hw_version + 0x30;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00C9     strncpy(res.fw_version, fw_version, 5);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00CA     send_respond((char *)&res, sizeof(res));
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00CB }
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;
;void send_respond(char * payload, unsigned short len){
; 0000 00CD void send_respond(char * payload, unsigned short len){
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00CE     unsigned char i;
; 0000 00CF     unsigned char checksum = 0;
; 0000 00D0     unsigned char *c;
; 0000 00D1     respond.header = 0x55FF;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;	*payload -> Y+6
;	len -> Y+4
;	i -> R17
;	checksum -> R16
;	*c -> R18,R19
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00D2     respond.len = 5 + len;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00D3     respond.tranId = request.tranId;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00D4     respond.opcode = request.opcode;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00D5     respond.type = TYPE_RESPOND;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00D6 
; 0000 00D7     memcpy(respond.payload, payload, len);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00D8 
; 0000 00D9     for(i = 0; i< respond.len - 1; i++){
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00DA         checksum += *(&respond.len + i);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00DB     }
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00DC 
; 0000 00DD     checksum = ~checksum + 1;
;PCODE: $00000190 VOL: 0
; 0000 00DE 
; 0000 00DF     c = (char*)&respond;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00E0     for(i = 0; i<respond.len + 1; i++){
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00E1         putchar(c[i]);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00E2     }
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00E3     putchar(checksum);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00E4 }
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;
;void process_upgrade_page()
; 0000 00E7 {
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00E8     unsigned char status = STATUS_SUCCESS;
; 0000 00E9     memcpy(&upgrade_page_request, request.payload, sizeof(upgrade_page_request));
;PCODE: $000001B2 VOL: 0
;	status -> R17
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00EA 
; 0000 00EB     #asm("cli")
;PCODE: $000001BD VOL: 0
	cli
;PCODE: $000001BE VOL: 0
; 0000 00EC 
; 0000 00ED     // Write page
; 0000 00EE     WritePage(upgrade_page_request.page_data, upgrade_page_request.page);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00EF 
; 0000 00F0     #asm("sei")
;PCODE: $000001C4 VOL: 0
	sei
;PCODE: $000001C5 VOL: 0
; 0000 00F1 
; 0000 00F2     send_respond((char*)&status, sizeof(status));
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00F3 }
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;
;void process_upgrade_finish()
; 0000 00F6 {
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00F7     // respond
; 0000 00F8     unsigned char status = STATUS_SUCCESS;
; 0000 00F9     send_respond((char*)&status, sizeof(status));
;PCODE: $000001D5 VOL: 0
;	status -> R17
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00FA 
; 0000 00FB     delay_ms(10);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00FC 
; 0000 00FD     _WAIT_FOR_SPM();
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00FE     _ENABLE_RWW_SECTION();
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00FF 
; 0000 0100     isUpgrade = false;
;PCODE: $000001F0 VOL: 0
; 0000 0101 }
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;
;/* Fill data into a temporary page (2 bytes once) */
;void boot_page_fill(unsigned int WordData, unsigned char Byte)
; 0000 0105 {
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0106     //while (SPMEN);
; 0000 0107     while(TSTBIT(SPMCSR,0));
;PCODE: $000001F6 VOL: 0
;	WordData -> Y+1
;	Byte -> Y+0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0108 #asm
;PCODE: $000001FE VOL: 0
; 0000 0109     LDD     R1, Y+2     ;R1  <-- MSB of data (Byte N)
    LDD     R1, Y+2     ;R1  <-- MSB of data (Byte N)
;PCODE: $000001FF VOL: 0
; 0000 010A     LDD     R0, Y+1     ;R0  <-- LSB of data (Byte N+1)
    LDD     R0, Y+1     ;R0  <-- LSB of data (Byte N+1)
;PCODE: $00000200 VOL: 0
; 0000 010B     LDI     R31, 0x00   ;Load 0x00 into R31
    LDI     R31, 0x00   ;Load 0x00 into R31
;PCODE: $00000201 VOL: 0
; 0000 010C     LDD     R30, Y+0    ;R30 <-- addr  (0-255 byte)
    LDD     R30, Y+0    ;R30 <-- addr  (0-255 byte)
;PCODE: $00000202 VOL: 0
; 0000 010D     LDI     R20,0x01    ;Load 0x01 into R20
    LDI     R20,0x01    ;Load 0x01 into R20
;PCODE: $00000203 VOL: 0
; 0000 010E     OUT     0x37,R20    ;R20 --> SPMCSR (BaseAddress: 0x37)
    OUT     0x37,R20    ;R20 --> SPMCSR (BaseAddress: 0x37)
;PCODE: $00000204 VOL: 0
; 0000 010F     SPM
    SPM
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0110 #endasm
; 0000 0111     WordData = 0; Byte = 0;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0112 }
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;
;/* Erase a page */
;void boot_page_erase(unsigned char Page)
; 0000 0116 {
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0117     while(TSTBIT(SPMCSR,0));
;PCODE: $00000210 VOL: 0
;	Page -> Y+0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0118     //SPMCSR = 0x03;
; 0000 0119 #asm
;PCODE: $00000218 VOL: 0
; 0000 011A     LDD R31, Y+0
    LDD R31, Y+0
;PCODE: $00000219 VOL: 0
; 0000 011B     LDI R30, 0x00
    LDI R30, 0x00
;PCODE: $0000021A VOL: 0
; 0000 011C     LSR R31
    LSR R31
;PCODE: $0000021B VOL: 0
; 0000 011D     ROR R30
    ROR R30
;PCODE: $0000021C VOL: 0
; 0000 011E     PUSH R20
    PUSH R20
;PCODE: $0000021D VOL: 0
; 0000 011F     LDI R20, 0x03
    LDI R20, 0x03
;PCODE: $0000021E VOL: 0
; 0000 0120     OUT 0x37, R20
    OUT 0x37, R20
;PCODE: $0000021F VOL: 0
; 0000 0121     POP R20
    POP R20
;PCODE: $00000220 VOL: 0
; 0000 0122     SPM
    SPM
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0123 #endasm
; 0000 0124     Page = 0;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0125 }
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;
;/* Write a Page */
;void boot_page_write(unsigned char Page)
; 0000 0129 {
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 012A     //while (SPMEN);
; 0000 012B     while(TSTBIT(SPMCSR,0));
;PCODE: $0000022A VOL: 0
;	Page -> Y+0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 012C     //SPMCSR =0x05;
; 0000 012D #asm
;PCODE: $00000232 VOL: 0
; 0000 012E     LDD R31, Y+0
    LDD R31, Y+0
;PCODE: $00000233 VOL: 0
; 0000 012F     LDI R30, 0x00
    LDI R30, 0x00
;PCODE: $00000234 VOL: 0
; 0000 0130     LSR R31
    LSR R31
;PCODE: $00000235 VOL: 0
; 0000 0131     ROR R30
    ROR R30
;PCODE: $00000236 VOL: 0
; 0000 0132     PUSH R20
    PUSH R20
;PCODE: $00000237 VOL: 0
; 0000 0133     LDI R20, 0x05
    LDI R20, 0x05
;PCODE: $00000238 VOL: 0
; 0000 0134     OUT 0x37, R20
    OUT 0x37, R20
;PCODE: $00000239 VOL: 0
; 0000 0135     POP R20
    POP R20
;PCODE: $0000023A VOL: 0
; 0000 0136     SPM
    SPM
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0137 #endasm
; 0000 0138     Page = 0;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0139 }
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;
;/* Write to the App. section */
;void WritePage(unsigned char *PageData, unsigned char PageNum)
; 0000 013D {
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 013E     unsigned int worddata = 0;
; 0000 013F     unsigned int bytenum = 0;  // 0 to 255
; 0000 0140 
; 0000 0141     boot_page_erase(PageNum);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;	*PageData -> Y+5
;	PageNum -> Y+4
;	worddata -> R16,R17
;	bytenum -> R18,R19
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0142     delay_ms(5);
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0143     while(bytenum < 128)
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0144     {
; 0000 0145         worddata = (unsigned int)(PageData[bytenum + 1]*256) + PageData[bytenum];
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0146 
; 0000 0147         boot_page_fill(worddata, bytenum);      delay_us(2);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0148         bytenum += 2;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0149     }
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 014A     boot_page_write(PageNum);
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 014B     delay_ms(5);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 014C }
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;
;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl)
; 0000 014F {
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0150 #asm
;PCODE: $00000274 VOL: 0
;	data -> Y+1
;	ctrl -> Y+0
;PCODE: $00000275 VOL: 0
; 0000 0151      ldd  r0,y+1
     ldd  r0,y+1
;PCODE: $00000276 VOL: 0
; 0000 0152      ld   r22,y
     ld   r22,y
;PCODE: $00000277 VOL: 0
; 0000 0153      WR_SPMCR_REG_R22
     WR_SPMCR_REG_R22
;PCODE: $00000278 VOL: 0
; 0000 0154      spm
     spm
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0155 #endasm
; 0000 0156 }
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;
