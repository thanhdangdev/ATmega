
AVRASM ver. 2.1.30  D:\GitHub\ATmega\PulseGenerator\Firmware\Boot\Debug\List\PulseGenerator.asm Sun Sep 30 03:35:50 2018

D:\GitHub\ATmega\PulseGenerator\Firmware\Boot\Debug\List\PulseGenerator.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\Boot\Debug\List\PulseGenerator.asm(1091): warning: Register r3 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\Boot\Debug\List\PulseGenerator.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\Boot\Debug\List\PulseGenerator.asm(1093): warning: Register r5 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\Boot\Debug\List\PulseGenerator.asm(1094): warning: Register r8 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\Boot\Debug\List\PulseGenerator.asm(1095): warning: Register r7 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\Boot\Debug\List\PulseGenerator.asm(1096): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Boot Loader
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hw_version=R4
                 	.DEF _get_status=R3
                 	.DEF _len=R6
                 	.DEF _isUpgrade=R5
                 	.DEF _tx_wr_index0=R8
                 	.DEF _tx_rd_index0=R7
                 	.DEF _tx_counter0=R10
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x3800
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
003800 940c 384b 	JMP  __RESET
003802 940c 3800 	JMP  0x3800
003804 940c 3800 	JMP  0x3800
003806 940c 3800 	JMP  0x3800
003808 940c 3800 	JMP  0x3800
00380a 940c 3800 	JMP  0x3800
00380c 940c 3800 	JMP  0x3800
00380e 940c 3800 	JMP  0x3800
003810 940c 3800 	JMP  0x3800
003812 940c 3800 	JMP  0x3800
003814 940c 3800 	JMP  0x3800
003816 940c 3800 	JMP  0x3800
003818 940c 3800 	JMP  0x3800
00381a 940c 3800 	JMP  0x3800
00381c 940c 3800 	JMP  0x3800
00381e 940c 3800 	JMP  0x3800
003820 940c 3800 	JMP  0x3800
003822 940c 3800 	JMP  0x3800
003824 940c 3b11 	JMP  _usart_rx_isr
003826 940c 3800 	JMP  0x3800
003828 940c 3b63 	JMP  _usart_tx_isr
00382a 940c 3800 	JMP  0x3800
00382c 940c 3800 	JMP  0x3800
00382e 940c 3800 	JMP  0x3800
003830 940c 3800 	JMP  0x3800
003832 940c 3800 	JMP  0x3800
                 
                 _tbl10_G101:
003834 2710
003835 03e8
003836 0064
003837 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
003838 0001      	.DB  0x1,0x0
                 _tbl16_G101:
003839 1000
00383a 0100
00383b 0010
00383c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00383d 0000
00383e 0001      	.DB  0x0,0x0,0x1,0x0
00383f 0000
003840 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
003841 2e30
003842 2e30
D:\GitHub\ATmega\PulseGenerator\Firmware\Boot\Debug\List\PulseGenerator.asm(1147): warning: .cseg .db misalignment - padding zero byte
003843 0030      	.DB  0x30,0x2E,0x30,0x2E,0x30
                 
                 __GLOBAL_INI_TBL:
003844 0008      	.DW  0x08
003845 0003      	.DW  0x03
003846 707a      	.DW  __REG_VARS*2
                 
003847 0005      	.DW  0x05
003848 0399      	.DW  _fw_version
003849 7082      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00384a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00384b 94f8      	CLI
00384c 27ee      	CLR  R30
00384d bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF THE BOOT LOADER
00384e e0f1      	LDI  R31,1
00384f bff5      	OUT  MCUCR,R31
003850 e0f2      	LDI  R31,2
003851 bff5      	OUT  MCUCR,R31
                 
                 ;CLEAR R2-R14
003852 e08d      	LDI  R24,(14-2)+1
003853 e0a2      	LDI  R26,2
003854 27bb      	CLR  R27
                 __CLEAR_REG:
003855 93ed      	ST   X+,R30
003856 958a      	DEC  R24
003857 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
003858 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
003859 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00385a e0a0      	LDI  R26,LOW(__SRAM_START)
00385b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00385c 93ed      	ST   X+,R30
00385d 9701      	SBIW R24,1
00385e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00385f e8e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
003860 e7f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
003861 9185      	LPM  R24,Z+
003862 9195      	LPM  R25,Z+
003863 9700      	SBIW R24,0
003864 f061      	BREQ __GLOBAL_INI_END
003865 91a5      	LPM  R26,Z+
003866 91b5      	LPM  R27,Z+
003867 9005      	LPM  R0,Z+
003868 9015      	LPM  R1,Z+
003869 01bf      	MOVW R22,R30
00386a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00386b 9005      	LPM  R0,Z+
00386c 920d      	ST   X+,R0
00386d 9701      	SBIW R24,1
00386e f7e1      	BRNE __GLOBAL_INI_LOOP
00386f 01fb      	MOVW R30,R22
003870 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
003871 e0e0      	LDI  R30,__GPIOR0_INIT
003872 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
003873 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
003874 bfed      	OUT  SPL,R30
003875 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
003876 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
003877 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
003878 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
003879 940c 387b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;? Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 8/8/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega328P
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include "system.h"
                 ;#include "protocol.h"
                 ;#include <iobits.h>
                 ;
                 ;/* definitions for SPM control */
                 ;#define	SPMCR_REG	SPMCSR
                 ;#asm
                      #define WR_SPMCR_REG_R22 out 0x37,r22
                 ; 0000 0020 #endasm
                 ;
                 ;#define _ENABLE_RWW_SECTION() __DataToR0ByteToSPMCR_SPM( 0x00, 0x11 )
                 ;#define _WAIT_FOR_SPM() while( SPMCR_REG & (1<<SELFPRGEN) );
                 ;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl);
                 ;
                 ;// Declare your global variables here
                 ;
                 ;char hw_version = 0;
                 ;char fw_version[] = "0.0.0";
                 
                 	.DSEG
                 ;
                 ;serial_command_t request;
                 ;serial_command_t respond;
                 ;
                 ;unsigned char get_status = GET_STATUS_COMPLETE;
                 ;unsigned char len = 0;
                 ;
                 ;upgrade_page_request_t upgrade_page_request;
                 ;
                 ;bool isUpgrade = true;
                 ;
                 ;void main(void)
                 ; 0000 0036 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0037     // Declare your local variables here
                 ; 0000 0038     unsigned char d = 0;
                 ; 0000 0039     system_init();
                 ;	d -> R17
00387b e010      	LDI  R17,0
00387c 940e 3ab7 	CALL _system_init
                 ; 0000 003A 
                 ; 0000 003B     for(d = 0; d<5; d++){
00387e e010      	LDI  R17,LOW(0)
                 _0x5:
00387f 3015      	CPI  R17,5
003880 f460      	BRSH _0x6
                 ; 0000 003C         PORTB.5 = 0;
003881 982d      	CBI  0x5,5
                 ; 0000 003D         delay_ms(200);
003882 eca8      	LDI  R26,LOW(200)
003883 e0b0      	LDI  R27,0
003884 940e 3bc0 	CALL _delay_ms
                 ; 0000 003E         PORTB.5 = 1;
003886 9a2d      	SBI  0x5,5
                 ; 0000 003F         delay_ms(200);
003887 eca8      	LDI  R26,LOW(200)
003888 e0b0      	LDI  R27,0
003889 940e 3bc0 	CALL _delay_ms
                 ; 0000 0040     }
00388b 5f1f      	SUBI R17,-1
00388c cff2      	RJMP _0x5
                 _0x6:
                 ; 0000 0041 
                 ; 0000 0042     // Global enable interrupts
                 ; 0000 0043     #asm("sei")
00388d 9478      	sei
                 ; 0000 0044     while (1)
                 _0xB:
                 ; 0000 0045     {
                 ; 0000 0046         if(getCommand()){
00388e d01b      	RCALL _getCommand
00388f 30e0      	CPI  R30,0
003890 f051      	BREQ _0xE
                 ; 0000 0047             process_request();
003891 d062      	RCALL _process_request
                 ; 0000 0048 
                 ; 0000 0049             #asm("cli")
003892 94f8      	cli
                 ; 0000 004A             rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
003893 e0e0      	LDI  R30,LOW(0)
003894 93e0 0301 	STS  _rx_rd_index0,R30
003896 93e0 0300 	STS  _rx_wr_index0,R30
003898 93e0 0302 	STS  _rx_counter0,R30
                 ; 0000 004B             #asm("sei")
00389a 9478      	sei
                 ; 0000 004C         }
                 ; 0000 004D 
                 ; 0000 004E         if(!isUpgrade){
                 _0xE:
00389b 2055      	TST  R5
00389c f439      	BRNE _0xF
                 ; 0000 004F             #asm("cli")
00389d 94f8      	cli
                 ; 0000 0050 
                 ; 0000 0051             // Jump to application
                 ; 0000 0052 //            #asm
                 ; 0000 0053 //            LDI     R30, 0x00
                 ; 0000 0054 //            LDI     R31, 0x00
                 ; 0000 0055 //            IJMP               ;Jump to address 0x0000
                 ; 0000 0056 //            #endasm
                 ; 0000 0057             #pragma optsize-
                 ; 0000 0058             // will use the interrupt vectors from the application section
                 ; 0000 0059             MCUCR=(1<<IVCE);
00389e e0e1      	LDI  R30,LOW(1)
00389f bfe5      	OUT  0x35,R30
                 ; 0000 005A             MCUCR=(0<<IVSEL) | (0<<IVCE);
0038a0 e0e0      	LDI  R30,LOW(0)
0038a1 bfe5      	OUT  0x35,R30
                 ; 0000 005B             #ifdef _OPTIMIZE_SIZE_
                 ; 0000 005C             #pragma optsize+
                 ; 0000 005D             #endif
                 ; 0000 005E 
                 ; 0000 005F             // start execution from address 0
                 ; 0000 0060             #asm("jmp 0")
0038a2 940c 0000 	jmp 0
                 ; 0000 0061         }
                 ; 0000 0062         delay_ms(5);
                 _0xF:
0038a4 e0a5      	LDI  R26,LOW(5)
0038a5 e0b0      	LDI  R27,0
0038a6 940e 3bc0 	CALL _delay_ms
                 ; 0000 0063     }
0038a8 cfe5      	RJMP _0xB
                 ; 0000 0064 }
                 _0x10:
0038a9 cfff      	RJMP _0x10
                 ; .FEND
                 ;
                 ;bool getCommand(){
                 ; 0000 0066 _Bool getCommand(){
                 _getCommand:
                 ; .FSTART _getCommand
                 ; 0000 0067      // Place your code here
                 ; 0000 0068       if(get_status == GET_STATUS_COMPLETE && rx_counter0 >= 7){
0038aa 2033      	TST  R3
0038ab f421      	BRNE _0x12
0038ac 91a0 0302 	LDS  R26,_rx_counter0
0038ae 30a7      	CPI  R26,LOW(0x7)
0038af f408      	BRSH _0x13
                 _0x12:
0038b0 c024      	RJMP _0x11
                 _0x13:
                 ; 0000 0069          if(getchar() == 0xFF){
0038b1 940e 3b43 	CALL _getchar
0038b3 3fef      	CPI  R30,LOW(0xFF)
0038b4 f4b9      	BRNE _0x14
                 ; 0000 006A             if(getchar() == 0x55){
0038b5 940e 3b43 	CALL _getchar
0038b7 35e5      	CPI  R30,LOW(0x55)
0038b8 f449      	BRNE _0x15
                 ; 0000 006B                len = getchar();
0038b9 940e 3b43 	CALL _getchar
0038bb 2e6e      	MOV  R6,R30
                 ; 0000 006C                if(len <= 157){
0038bc e9ed      	LDI  R30,LOW(157)
0038bd 15e6      	CP   R30,R6
0038be f010      	BRLO _0x16
                 ; 0000 006D                   get_status = GET_STATUS_GETTING;
0038bf e0e1      	LDI  R30,LOW(1)
0038c0 2e3e      	MOV  R3,R30
                 ; 0000 006E 
                 ; 0000 006F                }
                 ; 0000 0070             }else{
                 _0x16:
0038c1 c009      	RJMP _0x17
                 _0x15:
                 ; 0000 0071                #asm("cli")
0038c2 94f8      	cli
                 ; 0000 0072                 rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
0038c3 e0e0      	LDI  R30,LOW(0)
0038c4 93e0 0301 	STS  _rx_rd_index0,R30
0038c6 93e0 0300 	STS  _rx_wr_index0,R30
0038c8 93e0 0302 	STS  _rx_counter0,R30
                 ; 0000 0073                #asm("sei")
0038ca 9478      	sei
                 ; 0000 0074             }
                 _0x17:
                 ; 0000 0075          }else{
0038cb c009      	RJMP _0x18
                 _0x14:
                 ; 0000 0076             #asm("cli")
0038cc 94f8      	cli
                 ; 0000 0077             rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
0038cd e0e0      	LDI  R30,LOW(0)
0038ce 93e0 0301 	STS  _rx_rd_index0,R30
0038d0 93e0 0300 	STS  _rx_wr_index0,R30
0038d2 93e0 0302 	STS  _rx_counter0,R30
                 ; 0000 0078             #asm("sei")
0038d4 9478      	sei
                 ; 0000 0079          }
                 _0x18:
                 ; 0000 007A       }
                 ; 0000 007B 
                 ; 0000 007C       if(get_status == GET_STATUS_GETTING){
                 _0x11:
0038d5 e0e1      	LDI  R30,LOW(1)
0038d6 15e3      	CP   R30,R3
0038d7 f4d1      	BRNE _0x19
                 ; 0000 007D          if(rx_counter0 >= len - 1){
0038d8 2de6      	MOV  R30,R6
0038d9 e0f0      	LDI  R31,0
0038da 9731      	SBIW R30,1
0038db 91a0 0302 	LDS  R26,_rx_counter0
0038dd e0b0      	LDI  R27,0
0038de 17ae      	CP   R26,R30
0038df 07bf      	CPC  R27,R31
0038e0 f08c      	BRLT _0x1A
                 ; 0000 007E             memcpy(&request, &rx_buffer0, len + 2);
0038e1 e9ef      	LDI  R30,LOW(_request)
0038e2 e0f3      	LDI  R31,HIGH(_request)
0038e3 93fa      	ST   -Y,R31
0038e4 93ea      	ST   -Y,R30
0038e5 e0e3      	LDI  R30,LOW(_rx_buffer0)
0038e6 e0f3      	LDI  R31,HIGH(_rx_buffer0)
0038e7 93fa      	ST   -Y,R31
0038e8 93ea      	ST   -Y,R30
0038e9 2de6      	MOV  R30,R6
0038ea e0f0      	LDI  R31,0
0038eb 9632      	ADIW R30,2
0038ec 01df      	MOVW R26,R30
0038ed 940e 3b99 	CALL _memcpy
                 ; 0000 007F             get_status =  GET_STATUS_COMPLETE;
0038ef 2433      	CLR  R3
                 ; 0000 0080 
                 ; 0000 0081             return true;
0038f0 e0e1      	LDI  R30,LOW(1)
0038f1 9508      	RET
                 ; 0000 0082          }
                 ; 0000 0083       }
                 _0x1A:
                 ; 0000 0084 
                 ; 0000 0085       return false;
                 _0x19:
0038f2 e0e0      	LDI  R30,LOW(0)
0038f3 9508      	RET
                 ; 0000 0086 }
                 ; .FEND
                 ;
                 ;void process_request(){
                 ; 0000 0088 void process_request(){
                 _process_request:
                 ; .FSTART _process_request
                 ; 0000 0089    unsigned char len = request.len;
                 ; 0000 008A 
                 ; 0000 008B    if(checksum(&request.len, len) != 0){
0038f4 931a      	ST   -Y,R17
                 ;	len -> R17
                +
0038f5 91e0 03a1+LDS R30 , _request + ( 2 )
                 	__GETB1MN _request,2
0038f7 2f1e      	MOV  R17,R30
                +
0038f8 eae1     +LDI R30 , LOW ( _request + ( 2 ) )
0038f9 e0f3     +LDI R31 , HIGH ( _request + ( 2 ) )
                 	__POINTW1MN _request,2
0038fa 93fa      	ST   -Y,R31
0038fb 93ea      	ST   -Y,R30
0038fc 2fa1      	MOV  R26,R17
0038fd d007      	RCALL _checksum
0038fe 30e0      	CPI  R30,0
0038ff f011      	BREQ _0x1B
                 ; 0000 008C       response_error_checksum();
003900 d01c      	RCALL _response_error_checksum
                 ; 0000 008D    }else{
003901 c001      	RJMP _0x1C
                 _0x1B:
                 ; 0000 008E       execute_cmd();
003902 d02a      	RCALL _execute_cmd
                 ; 0000 008F    }
                 _0x1C:
                 ; 0000 0090 }
003903 940c 3b61 	JMP  _0x2060002
                 ; .FEND
                 ;
                 ;unsigned char checksum(unsigned char *dat, unsigned char len){
                 ; 0000 0092 unsigned char checksum(unsigned char *dat, unsigned char len){
                 _checksum:
                 ; .FSTART _checksum
                 ; 0000 0093    unsigned char ck  = 0;
                 ; 0000 0094    unsigned char i = 0;
                 ; 0000 0095 
                 ; 0000 0096    for(i = 0; i<len; i++){
003905 93aa      	ST   -Y,R26
003906 931a      	ST   -Y,R17
003907 930a      	ST   -Y,R16
                 ;	*dat -> Y+3
                 ;	len -> Y+2
                 ;	ck -> R17
                 ;	i -> R16
003908 e010      	LDI  R17,0
003909 e000      	LDI  R16,0
00390a e000      	LDI  R16,LOW(0)
                 _0x1E:
00390b 81ea      	LDD  R30,Y+2
00390c 170e      	CP   R16,R30
00390d f450      	BRSH _0x1F
                 ; 0000 0097       ck += *(dat + i);
00390e 2fe0      	MOV  R30,R16
00390f e0f0      	LDI  R31,0
003910 81ab      	LDD  R26,Y+3
003911 81bc      	LDD  R27,Y+3+1
003912 0fae      	ADD  R26,R30
003913 1fbf      	ADC  R27,R31
003914 91ec      	LD   R30,X
003915 0f1e      	ADD  R17,R30
                 ; 0000 0098    }
003916 5f0f      	SUBI R16,-1
003917 cff3      	RJMP _0x1E
                 _0x1F:
                 ; 0000 0099 
                 ; 0000 009A    return ck;
003918 2fe1      	MOV  R30,R17
003919 8119      	LDD  R17,Y+1
00391a 8108      	LDD  R16,Y+0
00391b 9625      	ADIW R28,5
00391c 9508      	RET
                 ; 0000 009B }
                 ; .FEND
                 ;
                 ;void response_error_checksum(){
                 ; 0000 009D void response_error_checksum(){
                 _response_error_checksum:
                 ; .FSTART _response_error_checksum
                 ; 0000 009E     unsigned char status = STATUS_ERROR_CHECKSUM;
                 ; 0000 009F     send_respond((char *)&status, sizeof(status));
00391d 931a      	ST   -Y,R17
                 ;	status -> R17
00391e e012      	LDI  R17,2
00391f b7ed      	IN   R30,SPL
003920 b7fe      	IN   R31,SPH
003921 9731      	SBIW R30,1
003922 93fa      	ST   -Y,R31
003923 93ea      	ST   -Y,R30
003924 932f      	PUSH R18
003925 931f      	PUSH R17
003926 e0a1      	LDI  R26,LOW(1)
003927 e0b0      	LDI  R27,0
003928 d081      	RCALL _send_respond
003929 911f      	POP  R17
00392a 912f      	POP  R18
                 ; 0000 00A0 }
00392b 940c 3b61 	JMP  _0x2060002
                 ; .FEND
                 ;
                 ;void execute_cmd(){
                 ; 0000 00A2 void execute_cmd(){
                 _execute_cmd:
                 ; .FSTART _execute_cmd
                 ; 0000 00A3     unsigned char status;
                 ; 0000 00A4     switch(request.opcode){
00392d 931a      	ST   -Y,R17
                 ;	status -> R17
                +
00392e 91e0 03a4+LDS R30 , _request + ( 5 )
                 	__GETB1MN _request,5
003930 e0f0      	LDI  R31,0
                 ; 0000 00A5     case CMD_READ_VERSION:
003931 30e1      	CPI  R30,LOW(0x1)
003932 e0a0      	LDI  R26,HIGH(0x1)
003933 07fa      	CPC  R31,R26
003934 f411      	BRNE _0x23
                 ; 0000 00A6         process_read_version();
003935 d032      	RCALL _process_read_version
                 ; 0000 00A7         break;
003936 c01f      	RJMP _0x22
                 ; 0000 00A8     case CMD_UPGRADE_START:
                 _0x23:
003937 30e4      	CPI  R30,LOW(0x4)
003938 e0a0      	LDI  R26,HIGH(0x4)
003939 07fa      	CPC  R31,R26
00393a f411      	BRNE _0x24
                 ; 0000 00A9         process_upgrade_start();
00393b d01c      	RCALL _process_upgrade_start
                 ; 0000 00AA         break;
00393c c019      	RJMP _0x22
                 ; 0000 00AB     case CMD_UPGRADE_PAGE:
                 _0x24:
00393d 30e5      	CPI  R30,LOW(0x5)
00393e e0a0      	LDI  R26,HIGH(0x5)
00393f 07fa      	CPC  R31,R26
003940 f411      	BRNE _0x25
                 ; 0000 00AC         process_upgrade_page();
003941 d0be      	RCALL _process_upgrade_page
                 ; 0000 00AD         break;
003942 c013      	RJMP _0x22
                 ; 0000 00AE     case CMD_UPGRADE_FINISH:
                 _0x25:
003943 30e6      	CPI  R30,LOW(0x6)
003944 e0a0      	LDI  R26,HIGH(0x6)
003945 07fa      	CPC  R31,R26
003946 f411      	BRNE _0x27
                 ; 0000 00AF         process_upgrade_finish();
003947 d0de      	RCALL _process_upgrade_finish
                 ; 0000 00B0         break;
003948 c00d      	RJMP _0x22
                 ; 0000 00B1     default:
                 _0x27:
                 ; 0000 00B2         status = STATUS_UNSUPPORT;
003949 e013      	LDI  R17,LOW(3)
                 ; 0000 00B3         send_respond((char *)&status, sizeof(status));
00394a b7ed      	IN   R30,SPL
00394b b7fe      	IN   R31,SPH
00394c 9731      	SBIW R30,1
00394d 93fa      	ST   -Y,R31
00394e 93ea      	ST   -Y,R30
00394f 932f      	PUSH R18
003950 931f      	PUSH R17
003951 e0a1      	LDI  R26,LOW(1)
003952 e0b0      	LDI  R27,0
003953 d056      	RCALL _send_respond
003954 911f      	POP  R17
003955 912f      	POP  R18
                 ; 0000 00B4         break;
                 ; 0000 00B5     }
                 _0x22:
                 ; 0000 00B6 }
003956 940c 3b61 	JMP  _0x2060002
                 ; .FEND
                 ;
                 ;void process_upgrade_start(){
                 ; 0000 00B8 void process_upgrade_start(){
                 _process_upgrade_start:
                 ; .FSTART _process_upgrade_start
                 ; 0000 00B9     unsigned char status = STATUS_SUCCESS;
                 ; 0000 00BA     send_respond((char*)&status, sizeof(status));
003958 931a      	ST   -Y,R17
                 ;	status -> R17
003959 e010      	LDI  R17,0
00395a b7ed      	IN   R30,SPL
00395b b7fe      	IN   R31,SPH
00395c 9731      	SBIW R30,1
00395d 93fa      	ST   -Y,R31
00395e 93ea      	ST   -Y,R30
00395f 932f      	PUSH R18
003960 931f      	PUSH R17
003961 e0a1      	LDI  R26,LOW(1)
003962 e0b0      	LDI  R27,0
003963 d046      	RCALL _send_respond
003964 911f      	POP  R17
003965 912f      	POP  R18
                 ; 0000 00BB }
003966 940c 3b61 	JMP  _0x2060002
                 ; .FEND
                 ;
                 ;void process_read_version(){
                 ; 0000 00BD void process_read_version(){
                 _process_read_version:
                 ; .FSTART _process_read_version
                 ; 0000 00BE     char *c;
                 ; 0000 00BF     char str[] = "0.0.0";
                 ; 0000 00C0     respond_read_version_t res;
                 ; 0000 00C1     unsigned char hw0 = PIND.6;
                 ; 0000 00C2     unsigned char hw1 = PIND.7;
                 ; 0000 00C3     //hw_version = (hw1 << 1) | (hw0 << 0);
                 ; 0000 00C4 
                 ; 0000 00C5     res.status = STATUS_SUCCESS;
003968 9761      	SBIW R28,17
003969 e3e0      	LDI  R30,LOW(48)
00396a 87eb      	STD  Y+11,R30
00396b e2ee      	LDI  R30,LOW(46)
00396c 87ec      	STD  Y+12,R30
00396d e3e0      	LDI  R30,LOW(48)
00396e 87ed      	STD  Y+13,R30
00396f e2ee      	LDI  R30,LOW(46)
003970 87ee      	STD  Y+14,R30
003971 e3e0      	LDI  R30,LOW(48)
003972 87ef      	STD  Y+15,R30
003973 e0e0      	LDI  R30,LOW(0)
003974 8be8      	STD  Y+16,R30
003975 940e 3bca 	CALL __SAVELOCR4
                 ;	*c -> R16,R17
                 ;	str -> Y+15
                 ;	res -> Y+4
                 ;	hw0 -> R19
                 ;	hw1 -> R18
003977 e0e0      	LDI  R30,0
003978 994e      	SBIC 0x9,6
003979 e0e1      	LDI  R30,1
00397a 2f3e      	MOV  R19,R30
00397b e0e0      	LDI  R30,0
00397c 994f      	SBIC 0x9,7
00397d e0e1      	LDI  R30,1
00397e 2f2e      	MOV  R18,R30
00397f e0e0      	LDI  R30,LOW(0)
003980 83ec      	STD  Y+4,R30
                 ; 0000 00C6     hw_version = hw1 * 2 + hw0 + 1;
003981 2fe2      	MOV  R30,R18
003982 0fee      	LSL  R30
003983 0fe3      	ADD  R30,R19
003984 5fef      	SUBI R30,-LOW(1)
003985 2e4e      	MOV  R4,R30
                 ; 0000 00C7     strncpy(res.hw_version, str, 5);
003986 01fe      	MOVW R30,R28
003987 9635      	ADIW R30,5
003988 93fa      	ST   -Y,R31
003989 93ea      	ST   -Y,R30
00398a 01fe      	MOVW R30,R28
00398b 9671      	ADIW R30,17
00398c 93fa      	ST   -Y,R31
00398d 93ea      	ST   -Y,R30
00398e e0a5      	LDI  R26,LOW(5)
00398f 940e 3bab 	CALL _strncpy
                 ; 0000 00C8     res.hw_version[0] = hw_version + 0x30;
003991 2de4      	MOV  R30,R4
003992 5de0      	SUBI R30,-LOW(48)
003993 83ed      	STD  Y+5,R30
                 ; 0000 00C9     strncpy(res.fw_version, fw_version, 5);
003994 01fe      	MOVW R30,R28
003995 963a      	ADIW R30,10
003996 93fa      	ST   -Y,R31
003997 93ea      	ST   -Y,R30
003998 e9e9      	LDI  R30,LOW(_fw_version)
003999 e0f3      	LDI  R31,HIGH(_fw_version)
00399a 93fa      	ST   -Y,R31
00399b 93ea      	ST   -Y,R30
00399c e0a5      	LDI  R26,LOW(5)
00399d 940e 3bab 	CALL _strncpy
                 ; 0000 00CA     send_respond((char *)&res, sizeof(res));
00399f 01fe      	MOVW R30,R28
0039a0 9634      	ADIW R30,4
0039a1 93fa      	ST   -Y,R31
0039a2 93ea      	ST   -Y,R30
0039a3 e0ab      	LDI  R26,LOW(11)
0039a4 e0b0      	LDI  R27,0
0039a5 d004      	RCALL _send_respond
                 ; 0000 00CB }
0039a6 940e 3bcf 	CALL __LOADLOCR4
0039a8 9665      	ADIW R28,21
0039a9 9508      	RET
                 ; .FEND
                 ;
                 ;void send_respond(char * payload, unsigned short len){
                 ; 0000 00CD void send_respond(char * payload, unsigned short len){
                 _send_respond:
                 ; .FSTART _send_respond
                 ; 0000 00CE     unsigned char i;
                 ; 0000 00CF     unsigned char checksum = 0;
                 ; 0000 00D0     unsigned char *c;
                 ; 0000 00D1     respond.header = 0x55FF;
0039aa 93ba      	ST   -Y,R27
0039ab 93aa      	ST   -Y,R26
0039ac 940e 3bca 	CALL __SAVELOCR4
                 ;	*payload -> Y+6
                 ;	len -> Y+4
                 ;	i -> R17
                 ;	checksum -> R16
                 ;	*c -> R18,R19
0039ae e000      	LDI  R16,0
0039af efef      	LDI  R30,LOW(22015)
0039b0 e5f5      	LDI  R31,HIGH(22015)
0039b1 93e0 043b 	STS  _respond,R30
0039b3 93f0 043c 	STS  _respond+1,R31
                 ; 0000 00D2     respond.len = 5 + len;
0039b5 81ec      	LDD  R30,Y+4
0039b6 5feb      	SUBI R30,-LOW(5)
                +
0039b7 93e0 043d+STS _respond + ( 2 ) , R30
                 	__PUTB1MN _respond,2
                 ; 0000 00D3     respond.tranId = request.tranId;
                +
0039b9 91e0 03a3+LDS R30 , _request + ( 4 )
                 	__GETB1MN _request,4
                +
0039bb 93e0 043f+STS _respond + ( 4 ) , R30
                 	__PUTB1MN _respond,4
                 ; 0000 00D4     respond.opcode = request.opcode;
                +
0039bd 91e0 03a4+LDS R30 , _request + ( 5 )
                 	__GETB1MN _request,5
                +
0039bf 93e0 0440+STS _respond + ( 5 ) , R30
                 	__PUTB1MN _respond,5
                 ; 0000 00D5     respond.type = TYPE_RESPOND;
0039c1 e0e2      	LDI  R30,LOW(2)
                +
0039c2 93e0 043e+STS _respond + ( 3 ) , R30
                 	__PUTB1MN _respond,3
                 ; 0000 00D6 
                 ; 0000 00D7     memcpy(respond.payload, payload, len);
                +
0039c4 e4e1     +LDI R30 , LOW ( _respond + ( 6 ) )
0039c5 e0f4     +LDI R31 , HIGH ( _respond + ( 6 ) )
                 	__POINTW1MN _respond,6
0039c6 93fa      	ST   -Y,R31
0039c7 93ea      	ST   -Y,R30
0039c8 85e8      	LDD  R30,Y+8
0039c9 85f9      	LDD  R31,Y+8+1
0039ca 93fa      	ST   -Y,R31
0039cb 93ea      	ST   -Y,R30
0039cc 85a8      	LDD  R26,Y+8
0039cd 85b9      	LDD  R27,Y+8+1
0039ce 940e 3b99 	CALL _memcpy
                 ; 0000 00D8 
                 ; 0000 00D9     for(i = 0; i< respond.len - 1; i++){
0039d0 e010      	LDI  R17,LOW(0)
                 _0x29:
                +
0039d1 91e0 043d+LDS R30 , _respond + ( 2 )
                 	__GETB1MN _respond,2
0039d3 e0f0      	LDI  R31,0
0039d4 9731      	SBIW R30,1
0039d5 2fa1      	MOV  R26,R17
0039d6 e0b0      	LDI  R27,0
0039d7 17ae      	CP   R26,R30
0039d8 07bf      	CPC  R27,R31
0039d9 f44c      	BRGE _0x2A
                 ; 0000 00DA         checksum += *(&respond.len + i);
                +
0039da e3ad     +LDI R26 , LOW ( _respond + ( 2 ) )
0039db e0b4     +LDI R27 , HIGH ( _respond + ( 2 ) )
                 	__POINTW2MN _respond,2
0039dc 27ee      	CLR  R30
0039dd 0fa1      	ADD  R26,R17
0039de 1fbe      	ADC  R27,R30
0039df 91ec      	LD   R30,X
0039e0 0f0e      	ADD  R16,R30
                 ; 0000 00DB     }
0039e1 5f1f      	SUBI R17,-1
0039e2 cfee      	RJMP _0x29
                 _0x2A:
                 ; 0000 00DC 
                 ; 0000 00DD     checksum = ~checksum + 1;
0039e3 9501      	NEG  R16
                 ; 0000 00DE 
                 ; 0000 00DF     c = (char*)&respond;
                +
0039e4 e32b     +LDI R18 , LOW ( _respond )
0039e5 e034     +LDI R19 , HIGH ( _respond )
                 	__POINTWRM 18,19,_respond
                 ; 0000 00E0     for(i = 0; i<respond.len + 1; i++){
0039e6 e010      	LDI  R17,LOW(0)
                 _0x2C:
                +
0039e7 91e0 043d+LDS R30 , _respond + ( 2 )
                 	__GETB1MN _respond,2
0039e9 e0f0      	LDI  R31,0
0039ea 9631      	ADIW R30,1
0039eb 2fa1      	MOV  R26,R17
0039ec e0b0      	LDI  R27,0
0039ed 17ae      	CP   R26,R30
0039ee 07bf      	CPC  R27,R31
0039ef f44c      	BRGE _0x2D
                 ; 0000 00E1         putchar(c[i]);
0039f0 01d9      	MOVW R26,R18
0039f1 27ee      	CLR  R30
0039f2 0fa1      	ADD  R26,R17
0039f3 1fbe      	ADC  R27,R30
0039f4 91ac      	LD   R26,X
0039f5 940e 3b7b 	CALL _putchar
                 ; 0000 00E2     }
0039f7 5f1f      	SUBI R17,-1
0039f8 cfee      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00E3     putchar(checksum);
0039f9 2fa0      	MOV  R26,R16
0039fa 940e 3b7b 	CALL _putchar
                 ; 0000 00E4 }
0039fc 940e 3bcf 	CALL __LOADLOCR4
0039fe 9628      	ADIW R28,8
0039ff 9508      	RET
                 ; .FEND
                 ;
                 ;void process_upgrade_page()
                 ; 0000 00E7 {
                 _process_upgrade_page:
                 ; .FSTART _process_upgrade_page
                 ; 0000 00E8     unsigned char status = STATUS_SUCCESS;
                 ; 0000 00E9     memcpy(&upgrade_page_request, request.payload, sizeof(upgrade_page_request));
003a00 931a      	ST   -Y,R17
                 ;	status -> R17
003a01 e010      	LDI  R17,0
003a02 ede7      	LDI  R30,LOW(_upgrade_page_request)
003a03 e0f4      	LDI  R31,HIGH(_upgrade_page_request)
003a04 93fa      	ST   -Y,R31
003a05 93ea      	ST   -Y,R30
                +
003a06 eae5     +LDI R30 , LOW ( _request + ( 6 ) )
003a07 e0f3     +LDI R31 , HIGH ( _request + ( 6 ) )
                 	__POINTW1MN _request,6
003a08 93fa      	ST   -Y,R31
003a09 93ea      	ST   -Y,R30
003a0a e8a1      	LDI  R26,LOW(129)
003a0b e0b0      	LDI  R27,0
003a0c 940e 3b99 	CALL _memcpy
                 ; 0000 00EA 
                 ; 0000 00EB     #asm("cli")
003a0e 94f8      	cli
                 ; 0000 00EC 
                 ; 0000 00ED     // Write page
                 ; 0000 00EE     WritePage(upgrade_page_request.page_data, upgrade_page_request.page);
                +
003a0f ede8     +LDI R30 , LOW ( _upgrade_page_request + ( 1 ) )
003a10 e0f4     +LDI R31 , HIGH ( _upgrade_page_request + ( 1 ) )
                 	__POINTW1MN _upgrade_page_request,1
003a11 93fa      	ST   -Y,R31
003a12 93ea      	ST   -Y,R30
003a13 91a0 04d7 	LDS  R26,_upgrade_page_request
003a15 940e 3a76 	CALL _WritePage
                 ; 0000 00EF 
                 ; 0000 00F0     #asm("sei")
003a17 9478      	sei
                 ; 0000 00F1 
                 ; 0000 00F2     send_respond((char*)&status, sizeof(status));
003a18 b7ed      	IN   R30,SPL
003a19 b7fe      	IN   R31,SPH
003a1a 9731      	SBIW R30,1
003a1b 93fa      	ST   -Y,R31
003a1c 93ea      	ST   -Y,R30
003a1d 932f      	PUSH R18
003a1e 931f      	PUSH R17
003a1f e0a1      	LDI  R26,LOW(1)
003a20 e0b0      	LDI  R27,0
003a21 df88      	RCALL _send_respond
003a22 911f      	POP  R17
003a23 912f      	POP  R18
                 ; 0000 00F3 }
003a24 940c 3b61 	JMP  _0x2060002
                 ; .FEND
                 ;
                 ;void process_upgrade_finish()
                 ; 0000 00F6 {
                 _process_upgrade_finish:
                 ; .FSTART _process_upgrade_finish
                 ; 0000 00F7     // respond
                 ; 0000 00F8     unsigned char status = STATUS_SUCCESS;
                 ; 0000 00F9     send_respond((char*)&status, sizeof(status));
003a26 931a      	ST   -Y,R17
                 ;	status -> R17
003a27 e010      	LDI  R17,0
003a28 b7ed      	IN   R30,SPL
003a29 b7fe      	IN   R31,SPH
003a2a 9731      	SBIW R30,1
003a2b 93fa      	ST   -Y,R31
003a2c 93ea      	ST   -Y,R30
003a2d 932f      	PUSH R18
003a2e 931f      	PUSH R17
003a2f e0a1      	LDI  R26,LOW(1)
003a30 e0b0      	LDI  R27,0
003a31 df78      	RCALL _send_respond
003a32 911f      	POP  R17
003a33 912f      	POP  R18
                 ; 0000 00FA 
                 ; 0000 00FB     delay_ms(10);
003a34 e0aa      	LDI  R26,LOW(10)
003a35 e0b0      	LDI  R27,0
003a36 940e 3bc0 	CALL _delay_ms
                 ; 0000 00FC 
                 ; 0000 00FD     _WAIT_FOR_SPM();
                 _0x2E:
003a38 b7e7      	IN   R30,0x37
003a39 fde0      	SBRC R30,0
003a3a cffd      	RJMP _0x2E
                 ; 0000 00FE     _ENABLE_RWW_SECTION();
003a3b e0e0      	LDI  R30,LOW(0)
003a3c 93ea      	ST   -Y,R30
003a3d e1a1      	LDI  R26,LOW(17)
003a3e 940e 3ab0 	CALL ___DataToR0ByteToSPMCR_SPM
                 ; 0000 00FF 
                 ; 0000 0100     isUpgrade = false;
003a40 2455      	CLR  R5
                 ; 0000 0101 }
003a41 940c 3b61 	JMP  _0x2060002
                 ; .FEND
                 ;
                 ;/* Fill data into a temporary page (2 bytes once) */
                 ;void boot_page_fill(unsigned int WordData, unsigned char Byte)
                 ; 0000 0105 {
                 _boot_page_fill:
                 ; .FSTART _boot_page_fill
                 ; 0000 0106     //while (SPMEN);
                 ; 0000 0107     while(TSTBIT(SPMCSR,0));
003a43 93aa      	ST   -Y,R26
                 ;	WordData -> Y+1
                 ;	Byte -> Y+0
                 _0x31:
003a44 b7e7      	IN   R30,0x37
003a45 fde0      	SBRC R30,0
003a46 cffd      	RJMP _0x31
                 ; 0000 0108 #asm
                 ; 0000 0109     LDD     R1, Y+2     ;R1  <-- MSB of data (Byte N)
003a47 801a          LDD     R1, Y+2     ;R1  <-- MSB of data (Byte N)
                 ; 0000 010A     LDD     R0, Y+1     ;R0  <-- LSB of data (Byte N+1)
003a48 8009          LDD     R0, Y+1     ;R0  <-- LSB of data (Byte N+1)
                 ; 0000 010B     LDI     R31, 0x00   ;Load 0x00 into R31
003a49 e0f0          LDI     R31, 0x00   ;Load 0x00 into R31
                 ; 0000 010C     LDD     R30, Y+0    ;R30 <-- addr  (0-255 byte)
003a4a 81e8          LDD     R30, Y+0    ;R30 <-- addr  (0-255 byte)
                 ; 0000 010D     LDI     R20,0x01    ;Load 0x01 into R20
003a4b e041          LDI     R20,0x01    ;Load 0x01 into R20
                 ; 0000 010E     OUT     0x37,R20    ;R20 --> SPMCSR (BaseAddress: 0x37)
003a4c bf47          OUT     0x37,R20    ;R20 --> SPMCSR (BaseAddress: 0x37)
                 ; 0000 010F     SPM
003a4d 95e8          SPM
                 ; 0000 0110 #endasm
                 ; 0000 0111     WordData = 0; Byte = 0;
003a4e e0e0      	LDI  R30,LOW(0)
003a4f 83e9      	STD  Y+1,R30
003a50 83ea      	STD  Y+1+1,R30
003a51 83e8      	ST   Y,R30
                 ; 0000 0112 }
003a52 9623      	ADIW R28,3
003a53 9508      	RET
                 ; .FEND
                 ;
                 ;/* Erase a page */
                 ;void boot_page_erase(unsigned char Page)
                 ; 0000 0116 {
                 _boot_page_erase:
                 ; .FSTART _boot_page_erase
                 ; 0000 0117     while(TSTBIT(SPMCSR,0));
003a54 93aa      	ST   -Y,R26
                 ;	Page -> Y+0
                 _0x34:
003a55 b7e7      	IN   R30,0x37
003a56 fde0      	SBRC R30,0
003a57 cffd      	RJMP _0x34
                 ; 0000 0118     //SPMCSR = 0x03;
                 ; 0000 0119 #asm
                 ; 0000 011A     LDD R31, Y+0
003a58 81f8          LDD R31, Y+0
                 ; 0000 011B     LDI R30, 0x00
003a59 e0e0          LDI R30, 0x00
                 ; 0000 011C     LSR R31
003a5a 95f6          LSR R31
                 ; 0000 011D     ROR R30
003a5b 95e7          ROR R30
                 ; 0000 011E     PUSH R20
003a5c 934f          PUSH R20
                 ; 0000 011F     LDI R20, 0x03
003a5d e043          LDI R20, 0x03
                 ; 0000 0120     OUT 0x37, R20
003a5e bf47          OUT 0x37, R20
                 ; 0000 0121     POP R20
003a5f 914f          POP R20
                 ; 0000 0122     SPM
003a60 95e8          SPM
                 ; 0000 0123 #endasm
                 ; 0000 0124     Page = 0;
003a61 e0e0      	LDI  R30,LOW(0)
003a62 83e8      	ST   Y,R30
                 ; 0000 0125 }
003a63 940c 3b97 	JMP  _0x2060001
                 ; .FEND
                 ;
                 ;/* Write a Page */
                 ;void boot_page_write(unsigned char Page)
                 ; 0000 0129 {
                 _boot_page_write:
                 ; .FSTART _boot_page_write
                 ; 0000 012A     //while (SPMEN);
                 ; 0000 012B     while(TSTBIT(SPMCSR,0));
003a65 93aa      	ST   -Y,R26
                 ;	Page -> Y+0
                 _0x37:
003a66 b7e7      	IN   R30,0x37
003a67 fde0      	SBRC R30,0
003a68 cffd      	RJMP _0x37
                 ; 0000 012C     //SPMCSR =0x05;
                 ; 0000 012D #asm
                 ; 0000 012E     LDD R31, Y+0
003a69 81f8          LDD R31, Y+0
                 ; 0000 012F     LDI R30, 0x00
003a6a e0e0          LDI R30, 0x00
                 ; 0000 0130     LSR R31
003a6b 95f6          LSR R31
                 ; 0000 0131     ROR R30
003a6c 95e7          ROR R30
                 ; 0000 0132     PUSH R20
003a6d 934f          PUSH R20
                 ; 0000 0133     LDI R20, 0x05
003a6e e045          LDI R20, 0x05
                 ; 0000 0134     OUT 0x37, R20
003a6f bf47          OUT 0x37, R20
                 ; 0000 0135     POP R20
003a70 914f          POP R20
                 ; 0000 0136     SPM
003a71 95e8          SPM
                 ; 0000 0137 #endasm
                 ; 0000 0138     Page = 0;
003a72 e0e0      	LDI  R30,LOW(0)
003a73 83e8      	ST   Y,R30
                 ; 0000 0139 }
003a74 940c 3b97 	JMP  _0x2060001
                 ; .FEND
                 ;
                 ;/* Write to the App. section */
                 ;void WritePage(unsigned char *PageData, unsigned char PageNum)
                 ; 0000 013D {
                 _WritePage:
                 ; .FSTART _WritePage
                 ; 0000 013E     unsigned int worddata = 0;
                 ; 0000 013F     unsigned int bytenum = 0;  // 0 to 255
                 ; 0000 0140 
                 ; 0000 0141     boot_page_erase(PageNum);
003a76 93aa      	ST   -Y,R26
003a77 940e 3bca 	CALL __SAVELOCR4
                 ;	*PageData -> Y+5
                 ;	PageNum -> Y+4
                 ;	worddata -> R16,R17
                 ;	bytenum -> R18,R19
                +
003a79 e000     +LDI R16 , LOW ( 0 )
003a7a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
003a7b e020     +LDI R18 , LOW ( 0 )
003a7c e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
003a7d 81ac      	LDD  R26,Y+4
003a7e dfd5      	RCALL _boot_page_erase
                 ; 0000 0142     delay_ms(5);
003a7f e0a5      	LDI  R26,LOW(5)
003a80 e0b0      	LDI  R27,0
003a81 940e 3bc0 	CALL _delay_ms
                 ; 0000 0143     while(bytenum < 128)
                 _0x3A:
                +
003a83 3820     +CPI R18 , LOW ( 128 )
003a84 e0e0     +LDI R30 , HIGH ( 128 )
003a85 073e     +CPC R19 , R30
                 	__CPWRN 18,19,128
003a86 f4f8      	BRSH _0x3C
                 ; 0000 0144     {
                 ; 0000 0145         worddata = (unsigned int)(PageData[bytenum + 1]*256) + PageData[bytenum];
003a87 01f9      	MOVW R30,R18
003a88 9631      	ADIW R30,1
003a89 81ad      	LDD  R26,Y+5
003a8a 81be      	LDD  R27,Y+5+1
003a8b 0fae      	ADD  R26,R30
003a8c 1fbf      	ADC  R27,R31
003a8d 91ec      	LD   R30,X
003a8e 2ffe      	MOV  R31,R30
003a8f e0e0      	LDI  R30,0
003a90 010f      	MOVW R0,R30
003a91 01f9      	MOVW R30,R18
003a92 81ad      	LDD  R26,Y+5
003a93 81be      	LDD  R27,Y+5+1
003a94 0fae      	ADD  R26,R30
003a95 1fbf      	ADC  R27,R31
003a96 91ec      	LD   R30,X
003a97 e0f0      	LDI  R31,0
003a98 0de0      	ADD  R30,R0
003a99 1df1      	ADC  R31,R1
003a9a 018f      	MOVW R16,R30
                 ; 0000 0146 
                 ; 0000 0147         boot_page_fill(worddata, bytenum);      delay_us(2);
003a9b 931a      	ST   -Y,R17
003a9c 930a      	ST   -Y,R16
003a9d 2fa2      	MOV  R26,R18
003a9e 940e 3a43 	CALL _boot_page_fill
                +
003aa0 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
003aa1 958a     +DEC R24
003aa2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0000 0148         bytenum += 2;
                +
003aa3 5f2e     +SUBI R18 , LOW ( - 2 )
003aa4 4f3f     +SBCI R19 , HIGH ( - 2 )
                 	__ADDWRN 18,19,2
                 ; 0000 0149     }
003aa5 cfdd      	RJMP _0x3A
                 _0x3C:
                 ; 0000 014A     boot_page_write(PageNum);
003aa6 81ac      	LDD  R26,Y+4
003aa7 dfbd      	RCALL _boot_page_write
                 ; 0000 014B     delay_ms(5);
003aa8 e0a5      	LDI  R26,LOW(5)
003aa9 e0b0      	LDI  R27,0
003aaa 940e 3bc0 	CALL _delay_ms
                 ; 0000 014C }
003aac 940e 3bcf 	CALL __LOADLOCR4
003aae 9627      	ADIW R28,7
003aaf 9508      	RET
                 ; .FEND
                 ;
                 ;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl)
                 ; 0000 014F {
                 ___DataToR0ByteToSPMCR_SPM:
                 ; .FSTART ___DataToR0ByteToSPMCR_SPM
                 ; 0000 0150 #asm
003ab0 93aa      	ST   -Y,R26
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0000 0151      ldd  r0,y+1
003ab1 8009           ldd  r0,y+1
                 ; 0000 0152      ld   r22,y
003ab2 8168           ld   r22,y
                 ; 0000 0153      WR_SPMCR_REG_R22
003ab3 bf67           WR_SPMCR_REG_R22
                 ; 0000 0154      spm
003ab4 95e8           spm
                 ; 0000 0155 #endasm
                 ; 0000 0156 }
003ab5 9622      	ADIW R28,2
003ab6 9508      	RET
                 ; .FEND
                 ;
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "system.h"
                 ;
                 ;void system_init(){
                 ; 0001 0004 void system_init(){
                 
                 	.CSEG
                 _system_init:
                 ; .FSTART _system_init
                 ; 0001 0005    // Crystal Oscillator division factor: 1
                 ; 0001 0006    #pragma optsize-
                 ; 0001 0007    CLKPR=(1<<CLKPCE);
003ab7 e8e0      	LDI  R30,LOW(128)
003ab8 93e0 0061 	STS  97,R30
                 ; 0001 0008    CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
003aba e0e0      	LDI  R30,LOW(0)
003abb 93e0 0061 	STS  97,R30
                 ; 0001 0009    #ifdef _OPTIMIZE_SIZE_
                 ; 0001 000A    #pragma optsize+
                 ; 0001 000B    #endif
                 ; 0001 000C 
                 ; 0001 000D    // Input/Output Ports initialization
                 ; 0001 000E    // Port B initialization
                 ; 0001 000F    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=In
                 ; 0001 0010    DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
003abd e0e2      	LDI  R30,LOW(2)
003abe b9e4      	OUT  0x4,R30
                 ; 0001 0011    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=T
                 ; 0001 0012    PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
003abf e0e0      	LDI  R30,LOW(0)
003ac0 b9e5      	OUT  0x5,R30
                 ; 0001 0013 
                 ; 0001 0014    // Port C initialization
                 ; 0001 0015    // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0016    DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
003ac1 b9e7      	OUT  0x7,R30
                 ; 0001 0017    // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0018    PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
003ac2 b9e8      	OUT  0x8,R30
                 ; 0001 0019 
                 ; 0001 001A    // Port D initialization
                 ; 0001 001B    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 001C    DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
003ac3 b9ea      	OUT  0xA,R30
                 ; 0001 001D    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 001E    PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
003ac4 b9eb      	OUT  0xB,R30
                 ; 0001 001F 
                 ; 0001 0020    // Timer/Counter 0 initialization
                 ; 0001 0021    // Clock source: System Clock
                 ; 0001 0022    // Clock value: Timer 0 Stopped
                 ; 0001 0023    // Mode: Normal top=0xFF
                 ; 0001 0024    // OC0A output: Disconnected
                 ; 0001 0025    // OC0B output: Disconnected
                 ; 0001 0026    TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
003ac5 bde4      	OUT  0x24,R30
                 ; 0001 0027    TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
003ac6 bde5      	OUT  0x25,R30
                 ; 0001 0028    TCNT0=0x00;
003ac7 bde6      	OUT  0x26,R30
                 ; 0001 0029    OCR0A=0x00;
003ac8 bde7      	OUT  0x27,R30
                 ; 0001 002A    OCR0B=0x00;
003ac9 bde8      	OUT  0x28,R30
                 ; 0001 002B 
                 ; 0001 002C    // Timer/Counter 1 initialization
                 ; 0001 002D    // Clock source: System Clock
                 ; 0001 002E    // Clock value: Timer1 Stopped
                 ; 0001 002F    // Mode: Normal top=0xFFFF
                 ; 0001 0030    // OC1A output: Disconnected
                 ; 0001 0031    // OC1B output: Disconnected
                 ; 0001 0032    // Noise Canceler: Off
                 ; 0001 0033    // Input Capture on Falling Edge
                 ; 0001 0034    // Timer1 Overflow Interrupt: Off
                 ; 0001 0035    // Input Capture Interrupt: Off
                 ; 0001 0036    // Compare A Match Interrupt: Off
                 ; 0001 0037    // Compare B Match Interrupt: Off
                 ; 0001 0038    TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
003aca 93e0 0080 	STS  128,R30
                 ; 0001 0039    TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
003acc 93e0 0081 	STS  129,R30
                 ; 0001 003A    TCNT1H=0x00;
003ace 93e0 0085 	STS  133,R30
                 ; 0001 003B    TCNT1L=0x00;
003ad0 93e0 0084 	STS  132,R30
                 ; 0001 003C    ICR1H=0x00;
003ad2 93e0 0087 	STS  135,R30
                 ; 0001 003D    ICR1L=0x00;
003ad4 93e0 0086 	STS  134,R30
                 ; 0001 003E    OCR1AH=0x00;
003ad6 93e0 0089 	STS  137,R30
                 ; 0001 003F    OCR1AL=0x00;
003ad8 93e0 0088 	STS  136,R30
                 ; 0001 0040    OCR1BH=0x00;
003ada 93e0 008b 	STS  139,R30
                 ; 0001 0041    OCR1BL=0x00;
003adc 93e0 008a 	STS  138,R30
                 ; 0001 0042 
                 ; 0001 0043    // Timer/Counter 2 initialization
                 ; 0001 0044    // Clock source: System Clock
                 ; 0001 0045    // Clock value: Timer2 Stopped
                 ; 0001 0046    // Mode: Normal top=0xFF
                 ; 0001 0047    // OC2A output: Disconnected
                 ; 0001 0048    // OC2B output: Disconnected
                 ; 0001 0049    ASSR=(0<<EXCLK) | (0<<AS2);
003ade 93e0 00b6 	STS  182,R30
                 ; 0001 004A    TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
003ae0 93e0 00b0 	STS  176,R30
                 ; 0001 004B    TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
003ae2 93e0 00b1 	STS  177,R30
                 ; 0001 004C    TCNT2=0x00;
003ae4 93e0 00b2 	STS  178,R30
                 ; 0001 004D    OCR2A=0x00;
003ae6 93e0 00b3 	STS  179,R30
                 ; 0001 004E    OCR2B=0x00;
003ae8 93e0 00b4 	STS  180,R30
                 ; 0001 004F 
                 ; 0001 0050    // Timer/Counter 0 Interrupt(s) initialization
                 ; 0001 0051    TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
003aea 93e0 006e 	STS  110,R30
                 ; 0001 0052 
                 ; 0001 0053    // Timer/Counter 1 Interrupt(s) initialization
                 ; 0001 0054    TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
003aec 93e0 006f 	STS  111,R30
                 ; 0001 0055 
                 ; 0001 0056    // Timer/Counter 2 Interrupt(s) initialization
                 ; 0001 0057    TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
003aee 93e0 0070 	STS  112,R30
                 ; 0001 0058 
                 ; 0001 0059    // External Interrupt(s) initialization
                 ; 0001 005A    // INT0: Off
                 ; 0001 005B    // INT1: Off
                 ; 0001 005C    // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 005D    // Interrupt on any change on pins PCINT8-14: Off
                 ; 0001 005E    // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 005F    EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
003af0 93e0 0069 	STS  105,R30
                 ; 0001 0060    EIMSK=(0<<INT1) | (0<<INT0);
003af2 bbed      	OUT  0x1D,R30
                 ; 0001 0061    PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
003af3 93e0 0068 	STS  104,R30
                 ; 0001 0062 
                 ; 0001 0063    // USART initialization
                 ; 0001 0064    // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 0065    // USART Receiver: On
                 ; 0001 0066    // USART Transmitter: On
                 ; 0001 0067    // USART0 Mode: Asynchronous
                 ; 0001 0068    // USART Baud Rate: 57600 (Double Speed Mode)
                 ; 0001 0069    //UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (1<<U2X0) | (0<<MPCM0);
                 ; 0001 006A    //UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
                 ; 0001 006B    //UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0) ...
                 ; 0001 006C    //UBRR0H=0x00;
                 ; 0001 006D    //UBRR0L=0x22;
                 ; 0001 006E 
                 ; 0001 006F    UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (1<<U2X0) | (0<<MPCM0);
003af5 e0e2      	LDI  R30,LOW(2)
003af6 93e0 00c0 	STS  192,R30
                 ; 0001 0070    UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
003af8 ede8      	LDI  R30,LOW(216)
003af9 93e0 00c1 	STS  193,R30
                 ; 0001 0071    UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
003afb e0e6      	LDI  R30,LOW(6)
003afc 93e0 00c2 	STS  194,R30
                 ; 0001 0072    UBRR0H=0x00;
003afe e0e0      	LDI  R30,LOW(0)
003aff 93e0 00c5 	STS  197,R30
                 ; 0001 0073    UBRR0L=0x22;
003b01 e2e2      	LDI  R30,LOW(34)
003b02 93e0 00c4 	STS  196,R30
                 ; 0001 0074 
                 ; 0001 0075    // Analog Comparator initialization
                 ; 0001 0076    // Analog Comparator: Off
                 ; 0001 0077    // The Analog Comparator's positive input is
                 ; 0001 0078    // connected to the AIN0 pin
                 ; 0001 0079    // The Analog Comparator's negative input is
                 ; 0001 007A    // connected to the AIN1 pin
                 ; 0001 007B    ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
003b04 e8e0      	LDI  R30,LOW(128)
003b05 bfe0      	OUT  0x30,R30
                 ; 0001 007C    ADCSRB=(0<<ACME);
003b06 e0e0      	LDI  R30,LOW(0)
003b07 93e0 007b 	STS  123,R30
                 ; 0001 007D    // Digital input buffer on AIN0: On
                 ; 0001 007E    // Digital input buffer on AIN1: On
                 ; 0001 007F    DIDR1=(0<<AIN0D) | (0<<AIN1D);
003b09 93e0 007f 	STS  127,R30
                 ; 0001 0080 
                 ; 0001 0081    // ADC initialization
                 ; 0001 0082    // ADC disabled
                 ; 0001 0083    ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
003b0b 93e0 007a 	STS  122,R30
                 ; 0001 0084 
                 ; 0001 0085    // SPI initialization
                 ; 0001 0086    // SPI disabled
                 ; 0001 0087    SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
003b0d bdec      	OUT  0x2C,R30
                 ; 0001 0088 
                 ; 0001 0089    // TWI initialization
                 ; 0001 008A    // TWI disabled
                 ; 0001 008B    TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
003b0e 93e0 00bc 	STS  188,R30
                 ; 0001 008C }
003b10 9508      	RET
                 ; .FEND
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "protocol.h"
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART Receiver buffer
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0002 001E {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
003b11 93aa      	ST   -Y,R26
003b12 93ea      	ST   -Y,R30
003b13 93fa      	ST   -Y,R31
003b14 b7ef      	IN   R30,SREG
003b15 93ea      	ST   -Y,R30
                 ; 0002 001F    char status,data;
                 ; 0002 0020    status=UCSR0A;
003b16 931a      	ST   -Y,R17
003b17 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
003b18 9110 00c0 	LDS  R17,192
                 ; 0002 0021    data=UDR0;
003b1a 9100 00c6 	LDS  R16,198
                 ; 0002 0022    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
003b1c 2fe1      	MOV  R30,R17
003b1d 71ec      	ANDI R30,LOW(0x1C)
003b1e f4e1      	BRNE _0x40003
                 ; 0002 0023       {
                 ; 0002 0024       rx_buffer0[rx_wr_index0++]=data;
003b1f 91e0 0300 	LDS  R30,_rx_wr_index0
003b21 5fef      	SUBI R30,-LOW(1)
003b22 93e0 0300 	STS  _rx_wr_index0,R30
003b24 50e1      	SUBI R30,LOW(1)
003b25 e0f0      	LDI  R31,0
003b26 5fed      	SUBI R30,LOW(-_rx_buffer0)
003b27 4ffc      	SBCI R31,HIGH(-_rx_buffer0)
003b28 8300      	ST   Z,R16
                 ; 0002 0025    #if RX_BUFFER_SIZE0 == 256
                 ; 0002 0026       // special case for receiver buffer size=256
                 ; 0002 0027       if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0002 0028    #else
                 ; 0002 0029       if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
003b29 91a0 0300 	LDS  R26,_rx_wr_index0
003b2b 39a6      	CPI  R26,LOW(0x96)
003b2c f419      	BRNE _0x40004
003b2d e0e0      	LDI  R30,LOW(0)
003b2e 93e0 0300 	STS  _rx_wr_index0,R30
                 ; 0002 002A       if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x40004:
003b30 91a0 0302 	LDS  R26,_rx_counter0
003b32 5faf      	SUBI R26,-LOW(1)
003b33 93a0 0302 	STS  _rx_counter0,R26
003b35 39a6      	CPI  R26,LOW(0x96)
003b36 f421      	BRNE _0x40005
                 ; 0002 002B          {
                 ; 0002 002C          rx_counter0=0;
003b37 e0e0      	LDI  R30,LOW(0)
003b38 93e0 0302 	STS  _rx_counter0,R30
                 ; 0002 002D          rx_buffer_overflow0=1;
003b3a 9af0      	SBI  0x1E,0
                 ; 0002 002E          }
                 ; 0002 002F    #endif
                 ; 0002 0030       }
                 _0x40005:
                 ; 0002 0031 }
                 _0x40003:
003b3b 9109      	LD   R16,Y+
003b3c 9119      	LD   R17,Y+
003b3d 91e9      	LD   R30,Y+
003b3e bfef      	OUT  SREG,R30
003b3f 91f9      	LD   R31,Y+
003b40 91e9      	LD   R30,Y+
003b41 91a9      	LD   R26,Y+
003b42 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0002 0038 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0002 0039    char data;
                 ; 0002 003A    while (rx_counter0==0);
003b43 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x40008:
003b44 91e0 0302 	LDS  R30,_rx_counter0
003b46 30e0      	CPI  R30,0
003b47 f3e1      	BREQ _0x40008
                 ; 0002 003B    data=rx_buffer0[rx_rd_index0++];
003b48 91e0 0301 	LDS  R30,_rx_rd_index0
003b4a 5fef      	SUBI R30,-LOW(1)
003b4b 93e0 0301 	STS  _rx_rd_index0,R30
003b4d 50e1      	SUBI R30,LOW(1)
003b4e e0f0      	LDI  R31,0
003b4f 5fed      	SUBI R30,LOW(-_rx_buffer0)
003b50 4ffc      	SBCI R31,HIGH(-_rx_buffer0)
003b51 8110      	LD   R17,Z
                 ; 0002 003C    #if RX_BUFFER_SIZE0 != 256
                 ; 0002 003D    if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
003b52 91a0 0301 	LDS  R26,_rx_rd_index0
003b54 39a6      	CPI  R26,LOW(0x96)
003b55 f419      	BRNE _0x4000B
003b56 e0e0      	LDI  R30,LOW(0)
003b57 93e0 0301 	STS  _rx_rd_index0,R30
                 ; 0002 003E    #endif
                 ; 0002 003F    #asm("cli")
                 _0x4000B:
003b59 94f8      	cli
                 ; 0002 0040    --rx_counter0;
003b5a 91e0 0302 	LDS  R30,_rx_counter0
003b5c 50e1      	SUBI R30,LOW(1)
003b5d 93e0 0302 	STS  _rx_counter0,R30
                 ; 0002 0041    #asm("sei")
003b5f 9478      	sei
                 ; 0002 0042    return data;
003b60 2fe1      	MOV  R30,R17
                 _0x2060002:
003b61 9119      	LD   R17,Y+
003b62 9508      	RET
                 ; 0002 0043 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0002 0059 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
003b63 93ea      	ST   -Y,R30
003b64 93fa      	ST   -Y,R31
003b65 b7ef      	IN   R30,SREG
003b66 93ea      	ST   -Y,R30
                 ; 0002 005A    if (tx_counter0)
003b67 20aa      	TST  R10
003b68 f069      	BREQ _0x4000C
                 ; 0002 005B       {
                 ; 0002 005C       --tx_counter0;
003b69 94aa      	DEC  R10
                 ; 0002 005D       UDR0=tx_buffer0[tx_rd_index0++];
003b6a 2de7      	MOV  R30,R7
003b6b 9473      	INC  R7
003b6c e0f0      	LDI  R31,0
003b6d 5ae8      	SUBI R30,LOW(-_tx_buffer0)
003b6e 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
003b6f 81e0      	LD   R30,Z
003b70 93e0 00c6 	STS  198,R30
                 ; 0002 005E    #if TX_BUFFER_SIZE0 != 256
                 ; 0002 005F       if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
003b72 e0e8      	LDI  R30,LOW(8)
003b73 15e7      	CP   R30,R7
003b74 f409      	BRNE _0x4000D
003b75 2477      	CLR  R7
                 ; 0002 0060    #endif
                 ; 0002 0061       }
                 _0x4000D:
                 ; 0002 0062 }
                 _0x4000C:
003b76 91e9      	LD   R30,Y+
003b77 bfef      	OUT  SREG,R30
003b78 91f9      	LD   R31,Y+
003b79 91e9      	LD   R30,Y+
003b7a 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0002 0069 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0002 006A    while (tx_counter0 == TX_BUFFER_SIZE0);
003b7b 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x4000E:
003b7c e0e8      	LDI  R30,LOW(8)
003b7d 15ea      	CP   R30,R10
003b7e f3e9      	BREQ _0x4000E
                 ; 0002 006B    #asm("cli")
003b7f 94f8      	cli
                 ; 0002 006C    if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
003b80 20aa      	TST  R10
003b81 f421      	BRNE _0x40012
003b82 91e0 00c0 	LDS  R30,192
003b84 72e0      	ANDI R30,LOW(0x20)
003b85 f469      	BRNE _0x40011
                 _0x40012:
                 ; 0002 006D       {
                 ; 0002 006E       tx_buffer0[tx_wr_index0++]=c;
003b86 2de8      	MOV  R30,R8
003b87 9483      	INC  R8
003b88 e0f0      	LDI  R31,0
003b89 5ae8      	SUBI R30,LOW(-_tx_buffer0)
003b8a 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
003b8b 81a8      	LD   R26,Y
003b8c 83a0      	STD  Z+0,R26
                 ; 0002 006F    #if TX_BUFFER_SIZE0 != 256
                 ; 0002 0070       if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
003b8d e0e8      	LDI  R30,LOW(8)
003b8e 15e8      	CP   R30,R8
003b8f f409      	BRNE _0x40014
003b90 2488      	CLR  R8
                 ; 0002 0071    #endif
                 ; 0002 0072       ++tx_counter0;
                 _0x40014:
003b91 94a3      	INC  R10
                 ; 0002 0073       }
                 ; 0002 0074    else
003b92 c003      	RJMP _0x40015
                 _0x40011:
                 ; 0002 0075       UDR0=c;
003b93 81e8      	LD   R30,Y
003b94 93e0 00c6 	STS  198,R30
                 ; 0002 0076    #asm("sei")
                 _0x40015:
003b96 9478      	sei
                 ; 0002 0077 }
                 _0x2060001:
003b97 9621      	ADIW R28,1
003b98 9508      	RET
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 
                 	.CSEG
                 _memcpy:
                 ; .FSTART _memcpy
003b99 93ba      	ST   -Y,R27
003b9a 93aa      	ST   -Y,R26
003b9b 8199          ldd  r25,y+1
003b9c 8188          ld   r24,y
003b9d 9600          adiw r24,0
003b9e f041          breq memcpy1
003b9f 81bd          ldd  r27,y+5
003ba0 81ac          ldd  r26,y+4
003ba1 81fb          ldd  r31,y+3
003ba2 81ea          ldd  r30,y+2
                 memcpy0:
003ba3 9161          ld   r22,z+
003ba4 936d          st   x+,r22
003ba5 9701          sbiw r24,1
003ba6 f7e1          brne memcpy0
                 memcpy1:
003ba7 81fd          ldd  r31,y+5
003ba8 81ec          ldd  r30,y+4
003ba9 9626      	ADIW R28,6
003baa 9508      	RET
                 ; .FEND
                 _strncpy:
                 ; .FSTART _strncpy
003bab 93aa      	ST   -Y,R26
003bac 9179          ld   r23,y+
003bad 91e9          ld   r30,y+
003bae 91f9          ld   r31,y+
003baf 91a9          ld   r26,y+
003bb0 91b9          ld   r27,y+
003bb1 01cd          movw r24,r26
                 strncpy0:
003bb2 2377          tst  r23
003bb3 f051          breq strncpy1
003bb4 957a          dec  r23
003bb5 9161          ld   r22,z+
003bb6 936d          st   x+,r22
003bb7 2366          tst  r22
003bb8 f7c9          brne strncpy0
                 strncpy2:
003bb9 2377          tst  r23
003bba f019          breq strncpy1
003bbb 957a          dec  r23
003bbc 936d          st   x+,r22
003bbd cffb          rjmp strncpy2
                 strncpy1:
003bbe 01fc          movw r30,r24
003bbf 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_wr_index0:
000300           	.BYTE 0x1
                 _rx_rd_index0:
000301           	.BYTE 0x1
                 _rx_counter0:
000302           	.BYTE 0x1
                 _rx_buffer0:
000303           	.BYTE 0x96
                 _fw_version:
000399           	.BYTE 0x6
                 _request:
00039f           	.BYTE 0x9C
                 _respond:
00043b           	.BYTE 0x9C
                 _upgrade_page_request:
0004d7           	.BYTE 0x81
                 _tx_buffer0:
000558           	.BYTE 0x8
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
003bc0 9610      	adiw r26,0
003bc1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
003bc2 ea80     +LDI R24 , LOW ( 0xFA0 )
003bc3 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
003bc4 9701     +SBIW R24 , 1
003bc5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
003bc6 95a8      	wdr
003bc7 9711      	sbiw r26,1
003bc8 f7c9      	brne __delay_ms0
                 __delay_ms1:
003bc9 9508      	ret
                 
                 __SAVELOCR4:
003bca 933a      	ST   -Y,R19
                 __SAVELOCR3:
003bcb 932a      	ST   -Y,R18
                 __SAVELOCR2:
003bcc 931a      	ST   -Y,R17
003bcd 930a      	ST   -Y,R16
003bce 9508      	RET
                 
                 __LOADLOCR4:
003bcf 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
003bd0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
003bd1 8119      	LDD  R17,Y+1
003bd2 8108      	LD   R16,Y
003bd3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   8 r1 :   3 r2 :   0 r3 :   4 r4 :   2 r5 :   2 r6 :   4 r7 :   4 
r8 :   4 r9 :   0 r10:   5 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  20 r17:  52 r18:  22 r19:   8 r20:  10 r21:   0 r22:  10 r23:   5 
r24:  16 r25:   4 r26:  81 r27:  36 r28:  14 r29:   1 r30: 309 r31:  78 
x  :  11 y  : 138 z  :  13 
Registers used: 27 out of 35 (77.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   9 
adiw  :  17 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  10 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :  25 brpl  :   0 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  26 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   8 cln   :   0 
clr   :   8 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :   8 cpi   :  15 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  16 inc   :   3 jmp   :  36 ld    :  29 ldd   :  32 ldi   : 155 
lds   :  19 lpm   :   7 lsl   :   1 lsr   :   2 mov   :  22 movw  :  15 
mul   :   0 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   0 
ori   :   0 out   :  28 pop   :  12 push  :  12 rcall :  17 ret   :  16 
reti  :   2 rjmp  :  22 rol   :   0 ror   :   2 sbc   :   0 sbci  :   5 
sbi   :   2 sbic  :   2 sbis  :   0 sbiw  :  14 sbr   :   0 sbrc  :   4 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   7 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   8 
st    :  83 std   :  11 sts   :  56 sub   :   0 subi  :  18 swap  :   0 
tst   :   7 wdr   :   1 
Instructions used: 52 out of 116 (44.8%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x007000 0x0077a8   1914     46   1960   32768   6.0%
[.dseg] 0x000100 0x000560      0    608    608    2048  29.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
