;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;? Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/8/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;#include "main.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "system.h"
;#include "protocol.h"
;
;// Declare your global variables here
;
;char hw_version = 0;
;char fw_version[] = "1.0.1";

	.DSEG
;
;serial_command_t request;
;serial_command_t respond;
;
;unsigned char get_status = GET_STATUS_COMPLETE;
;unsigned char len = 0;
;
;Payload_Write_Register pl_write_register;
;test_transfer_request_t test_transfer_request;
;
;void main(void)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 002B    // Declare your local variables here
; 0000 002C 
; 0000 002D    system_init();
;PCODE: $0000000E VOL: 0
; 0000 002E 
; 0000 002F    // Global enable interrupts
; 0000 0030    #asm("sei")
;PCODE: $0000000F VOL: 0
	sei
;PCODE: $00000010 VOL: 0
; 0000 0031    while (1)
;PCODE: $00000011 VOL: 0
; 0000 0032    {
; 0000 0033       if(getCommand()){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0034          process_request();
;PCODE: $00000015 VOL: 0
; 0000 0035 
; 0000 0036          #asm("cli")
;PCODE: $00000016 VOL: 0
	cli
;PCODE: $00000017 VOL: 0
; 0000 0037          rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0038          #asm("sei")
;PCODE: $0000001C VOL: 0
	sei
;PCODE: $0000001D VOL: 0
; 0000 0039       }
; 0000 003A 
; 0000 003B 
; 0000 003C 
; 0000 003D    }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003E }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;bool getCommand(){
; 0000 0040 _Bool getCommand(){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0041      // Place your code here
; 0000 0042       if(get_status == GET_STATUS_COMPLETE && rx_counter0 >= 7){
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0043          if(getchar() == 0xFF){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0044             if(getchar() == 0x55){
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0045                len = getchar();
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0046                if(len <= 135){
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0047                   get_status = GET_STATUS_GETTING;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0048 
; 0000 0049                }
; 0000 004A             }else{
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004B                #asm("cli")
;PCODE: $0000003F VOL: 0
	cli
;PCODE: $00000040 VOL: 0
; 0000 004C                 rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004D                #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 004E             }
;PCODE: $00000047 VOL: 0
; 0000 004F          }else{
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0050             #asm("cli")
;PCODE: $0000004A VOL: 0
	cli
;PCODE: $0000004B VOL: 0
; 0000 0051             rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0052             #asm("sei")
;PCODE: $00000050 VOL: 0
	sei
;PCODE: $00000051 VOL: 0
; 0000 0053          }
;PCODE: $00000052 VOL: 0
; 0000 0054       }
; 0000 0055 
; 0000 0056       if(get_status == GET_STATUS_GETTING){
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0057          if(rx_counter0 >= len - 1){
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0058             memcpy(&request, &rx_buffer0, len + 2);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0059             get_status =  GET_STATUS_COMPLETE;
;PCODE: $00000067 VOL: 0
; 0000 005A 
; 0000 005B             return true;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005C          }
; 0000 005D       }
;PCODE: $0000006A VOL: 0
; 0000 005E 
; 0000 005F       return false;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0060 }
;PCODE: $0000006E VOL: 0
;
;void process_request(){
; 0000 0062 void process_request(){
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0063    unsigned char len = request.len;
; 0000 0064 
; 0000 0065    if(checksum(&request.len, len) != 0){
;PCODE: $00000071 VOL: 0
;	len -> R17
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0066       response_error_checksum();
;PCODE: $0000007C VOL: 0
; 0000 0067    }else{
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0068       execute_cmd();
;PCODE: $0000007F VOL: 0
; 0000 0069    }
;PCODE: $00000080 VOL: 0
; 0000 006A }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;
;unsigned char checksum(unsigned char *dat, unsigned char len){
; 0000 006C unsigned char checksum(unsigned char *dat, unsigned char len){
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 006D    unsigned char ck  = 0;
; 0000 006E    unsigned char i = 0;
; 0000 006F 
; 0000 0070    for(i = 0; i<len; i++){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;	*dat -> Y+3
;	len -> Y+2
;	ck -> R17
;	i -> R16
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0071       ck += *(dat + i);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0072    }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0073 
; 0000 0074    return ck;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0075 }
;PCODE: $000000A9 VOL: 0
;
;void response_error_checksum(){
; 0000 0077 void response_error_checksum(){
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0078     unsigned char status = STATUS_ERROR_CHECKSUM;
; 0000 0079     send_respond((char *)&status, sizeof(status));
;PCODE: $000000AC VOL: 0
;	status -> R17
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 007A }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;
;void execute_cmd(){
; 0000 007C void execute_cmd(){
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 007D     unsigned char status;
; 0000 007E     switch(request.opcode){
;PCODE: $000000BE VOL: 0
;	status -> R17
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 007F     case CMD_READ_VERSION:
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0080         process_read_version();
;PCODE: $000000C4 VOL: 0
; 0000 0081         break;
;PCODE: $000000C5 VOL: 0
; 0000 0082     case CMD_TEST_TRANSFER:
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0083         process_test_transfer();
;PCODE: $000000C9 VOL: 0
; 0000 0084         break;
;PCODE: $000000CA VOL: 0
; 0000 0085     case CMD_WRITE_REGISTER:
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0086         process_write_register();
;PCODE: $000000CE VOL: 0
; 0000 0087         break;
;PCODE: $000000CF VOL: 0
; 0000 0088     case CMD_UPGRADE_START:
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0089         process_upgrade_start();
;PCODE: $000000D3 VOL: 0
; 0000 008A         break;
;PCODE: $000000D4 VOL: 0
; 0000 008B     default:
;PCODE: $000000D5 VOL: 0
; 0000 008C         status = STATUS_UNSUPPORT;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 008D         send_respond((char *)&status, sizeof(status));
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 008E         break;
;PCODE: $000000E2 VOL: 0
; 0000 008F     }
;PCODE: $000000E3 VOL: 0
; 0000 0090 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;void process_test_transfer(){
; 0000 0092 void process_test_transfer(){
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0093     test_transfer_respond_t respond;
; 0000 0094 
; 0000 0095     memcpy(&test_transfer_request, request.payload, sizeof(test_transfer_request));
;PCODE: $000000E9 VOL: 0
;	respond -> Y+0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0096     respond.status = STATUS_SUCCESS;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0097     respond.len = test_transfer_request.len;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0098     if(respond.len > 128){
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0099         respond.status = STATUS_FAIL;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 009A         send_respond((char*)&respond.status, sizeof(respond.status));
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 009B     }else{
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 009C         memcpy(&respond.data, test_transfer_request.data, respond.len);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 009D         send_respond((char*)&respond, respond.len + 2);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 009E     }
;PCODE: $00000111 VOL: 0
; 0000 009F }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;
;void process_upgrade_start(){
; 0000 00A1 void process_upgrade_start(){
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00A2     unsigned char status = STATUS_SUCCESS;
; 0000 00A3     send_respond((char*)&status, sizeof(status));
;PCODE: $00000117 VOL: 0
;	status -> R17
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00A4 
; 0000 00A5     delay_ms(10);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00A6     #asm("cli")
;PCODE: $00000127 VOL: 0
	cli
;PCODE: $00000128 VOL: 0
; 0000 00A7     #asm
;PCODE: $00000129 VOL: 0
; 0000 00A8         LDI     R31, 0x38
        LDI     R31, 0x38
;PCODE: $0000012A VOL: 0
; 0000 00A9         LDI     R30, 0x00
        LDI     R30, 0x00
;PCODE: $0000012B VOL: 0
; 0000 00AA         IJMP              ;Jump to address 0x3800
        IJMP              ;Jump to address 0x3800
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00AB     #endasm
; 0000 00AC }
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;
;void process_read_version(){
; 0000 00AE void process_read_version(){
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00AF     char *c;
; 0000 00B0     char str[] = "0.0.0";
; 0000 00B1     respond_read_version_t res;
; 0000 00B2     unsigned char hw0 = PIND.6;
; 0000 00B3     unsigned char hw1 = PIND.7;
; 0000 00B4     //hw_version = (hw1 << 1) | (hw0 << 0);
; 0000 00B5 
; 0000 00B6     res.status = STATUS_SUCCESS;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;	*c -> R16,R17
;	str -> Y+15
;	res -> Y+4
;	hw0 -> R19
;	hw1 -> R18
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00B7     hw_version = hw1 * 2 + hw0 + 1;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00B8     strncpy(res.hw_version, str, 5);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00B9     res.hw_version[0] = hw_version + 0x30;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00BA     strncpy(res.fw_version, fw_version, 5);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00BB     send_respond((char *)&res, sizeof(res));
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00BC }
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;
;void process_write_register(){
; 0000 00BE void process_write_register(){
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00BF     unsigned char status = STATUS_SUCCESS;
; 0000 00C0     memcpy(&pl_write_register, request.payload, sizeof(pl_write_register));
;PCODE: $00000168 VOL: 0
;	status -> R17
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00C1 
; 0000 00C2     TCCR1A = pl_write_register.reg_TCCR1A;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00C3     TCCR1B = pl_write_register.reg_TCCR1B;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00C4     ICR1H = pl_write_register.reg_ICR1H;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00C5     ICR1L = pl_write_register.reg_ICR1L;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00C6     OCR1AH= pl_write_register.reg_OCR1AH;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00C7     OCR1AL=pl_write_register.reg_OCR1AL;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00C8 
; 0000 00C9     send_respond((char*)&status, sizeof(status));
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00CA }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;
;void send_respond(char * payload, unsigned short len){
; 0000 00CC void send_respond(char * payload, unsigned short len){
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00CD     unsigned char i;
; 0000 00CE     unsigned char checksum = 0;
; 0000 00CF     unsigned char *c;
; 0000 00D0     respond.header = 0x55FF;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;	*payload -> Y+6
;	len -> Y+4
;	i -> R17
;	checksum -> R16
;	*c -> R18,R19
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00D1     respond.len = 5 + len;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00D2     respond.tranId = request.tranId;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00D3     respond.opcode = request.opcode;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00D4     respond.type = TYPE_RESPOND;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00D5 
; 0000 00D6     memcpy(respond.payload, payload, len);
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00D7 
; 0000 00D8     for(i = 0; i< respond.len - 1; i++){
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00D9         checksum += *(&respond.len + i);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00DA     }
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 00DB 
; 0000 00DC     checksum = ~checksum + 1;
;PCODE: $000001C8 VOL: 0
; 0000 00DD 
; 0000 00DE     c = (char*)&respond;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00DF     for(i = 0; i<respond.len + 2; i++){
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00E0         putchar(c[i]);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00E1     }
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00E2     putchar(checksum);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00E3 }
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
