
AVRASM ver. 2.1.30  D:\GitHub\ATmega\PulseGenerator\Firmware\App\Debug\List\PulseGenerator.asm Sun Sep 30 01:58:47 2018

D:\GitHub\ATmega\PulseGenerator\Firmware\App\Debug\List\PulseGenerator.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\App\Debug\List\PulseGenerator.asm(1091): warning: Register r3 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\App\Debug\List\PulseGenerator.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\App\Debug\List\PulseGenerator.asm(1093): warning: Register r5 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\App\Debug\List\PulseGenerator.asm(1094): warning: Register r8 already defined by the .DEF directive
D:\GitHub\ATmega\PulseGenerator\Firmware\App\Debug\List\PulseGenerator.asm(1095): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hw_version=R4
                 	.DEF _get_status=R3
                 	.DEF _len=R6
                 	.DEF _tx_wr_index0=R5
                 	.DEF _tx_rd_index0=R8
                 	.DEF _tx_counter0=R7
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0296 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 02e8 	JMP  _usart_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003d 0000
00003e 0000      	.DB  0x0,0x0,0x0,0x0
00003f 0000      	.DB  0x0,0x0
                 
                 _0x3:
000040 2e31
000041 2e30
D:\GitHub\ATmega\PulseGenerator\Firmware\App\Debug\List\PulseGenerator.asm(1146): warning: .cseg .db misalignment - padding zero byte
000042 0031      	.DB  0x31,0x2E,0x30,0x2E,0x31
                 
                 __GLOBAL_INI_TBL:
000043 0006      	.DW  0x06
000044 0003      	.DW  0x03
000045 007a      	.DW  __REG_VARS*2
                 
000046 0005      	.DW  0x05
000047 0399      	.DW  _fw_version
000048 0080      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000049 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004a 94f8      	CLI
00004b 27ee      	CLR  R30
00004c bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004d e0f1      	LDI  R31,1
00004e bff5      	OUT  MCUCR,R31
00004f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000050 e08d      	LDI  R24,(14-2)+1
000051 e0a2      	LDI  R26,2
000052 27bb      	CLR  R27
                 __CLEAR_REG:
000053 93ed      	ST   X+,R30
000054 958a      	DEC  R24
000055 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000056 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000057 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000058 e0a0      	LDI  R26,LOW(__SRAM_START)
000059 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005a 93ed      	ST   X+,R30
00005b 9701      	SBIW R24,1
00005c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005d e8e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005f 9185      	LPM  R24,Z+
000060 9195      	LPM  R25,Z+
000061 9700      	SBIW R24,0
000062 f061      	BREQ __GLOBAL_INI_END
000063 91a5      	LPM  R26,Z+
000064 91b5      	LPM  R27,Z+
000065 9005      	LPM  R0,Z+
000066 9015      	LPM  R1,Z+
000067 01bf      	MOVW R22,R30
000068 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000069 9005      	LPM  R0,Z+
00006a 920d      	ST   X+,R0
00006b 9701      	SBIW R24,1
00006c f7e1      	BRNE __GLOBAL_INI_LOOP
00006d 01fb      	MOVW R30,R22
00006e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00006f e0e0      	LDI  R30,__GPIOR0_INIT
000070 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000071 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000072 bfed      	OUT  SPL,R30
000073 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000074 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000075 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000076 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000077 940c 0079 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;? Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 8/8/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega328P
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include "system.h"
                 ;#include "protocol.h"
                 ;
                 ;// Declare your global variables here
                 ;
                 ;char hw_version = 0;
                 ;char fw_version[] = "1.0.1";
                 
                 	.DSEG
                 ;
                 ;serial_command_t request;
                 ;serial_command_t respond;
                 ;
                 ;unsigned char get_status = GET_STATUS_COMPLETE;
                 ;unsigned char len = 0;
                 ;
                 ;Payload_Write_Register pl_write_register;
                 ;test_transfer_request_t test_transfer_request;
                 ;
                 ;void main(void)
                 ; 0000 002A {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002B    // Declare your local variables here
                 ; 0000 002C 
                 ; 0000 002D    system_init();
000079 940e 0239 	CALL _system_init
                 ; 0000 002E 
                 ; 0000 002F    // Global enable interrupts
                 ; 0000 0030    #asm("sei")
00007b 9478      	sei
                 ; 0000 0031 
                 ; 0000 0032    while (1)
                 _0x4:
                 ; 0000 0033    {
                 ; 0000 0034       if(getCommand()){
00007c d009      	RCALL _getCommand
00007d 30e0      	CPI  R30,0
00007e f029      	BREQ _0x7
                 ; 0000 0035          process_request();
00007f d046      	RCALL _process_request
                 ; 0000 0036 
                 ; 0000 0037          #asm("cli")
000080 94f8      	cli
                 ; 0000 0038          rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
000081 940e 0345 	CALL SUBOPT_0x0
                 ; 0000 0039          #asm("sei")
000083 9478      	sei
                 ; 0000 003A       }
                 ; 0000 003B    }
                 _0x7:
000084 cff7      	RJMP _0x4
                 ; 0000 003C }
                 _0x8:
000085 cfff      	RJMP _0x8
                 ; .FEND
                 ;
                 ;bool getCommand(){
                 ; 0000 003E _Bool getCommand(){
                 _getCommand:
                 ; .FSTART _getCommand
                 ; 0000 003F      // Place your code here
                 ; 0000 0040       if(get_status == GET_STATUS_COMPLETE && rx_counter0 >= 7){
000086 2033      	TST  R3
000087 f421      	BRNE _0xA
000088 91a0 0302 	LDS  R26,_rx_counter0
00008a 30a7      	CPI  R26,LOW(0x7)
00008b f408      	BRSH _0xB
                 _0xA:
00008c c01a      	RJMP _0x9
                 _0xB:
                 ; 0000 0041          if(getchar() == 0xFF){
00008d 940e 02c8 	CALL _getchar
00008f 3fef      	CPI  R30,LOW(0xFF)
000090 f491      	BRNE _0xC
                 ; 0000 0042             if(getchar() == 0x55){
000091 940e 02c8 	CALL _getchar
000093 35e5      	CPI  R30,LOW(0x55)
000094 f449      	BRNE _0xD
                 ; 0000 0043                len = getchar();
000095 940e 02c8 	CALL _getchar
000097 2e6e      	MOV  R6,R30
                 ; 0000 0044                if(len <= 135){
000098 e8e7      	LDI  R30,LOW(135)
000099 15e6      	CP   R30,R6
00009a f010      	BRLO _0xE
                 ; 0000 0045                   get_status = GET_STATUS_GETTING;
00009b e0e1      	LDI  R30,LOW(1)
00009c 2e3e      	MOV  R3,R30
                 ; 0000 0046 
                 ; 0000 0047                }
                 ; 0000 0048             }else{
                 _0xE:
00009d c004      	RJMP _0xF
                 _0xD:
                 ; 0000 0049                #asm("cli")
00009e 94f8      	cli
                 ; 0000 004A                 rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
00009f 940e 0345 	CALL SUBOPT_0x0
                 ; 0000 004B                #asm("sei")
0000a1 9478      	sei
                 ; 0000 004C             }
                 _0xF:
                 ; 0000 004D          }else{
0000a2 c004      	RJMP _0x10
                 _0xC:
                 ; 0000 004E             #asm("cli")
0000a3 94f8      	cli
                 ; 0000 004F             rx_counter0 = rx_wr_index0 = rx_rd_index0 = 0 ;
0000a4 940e 0345 	CALL SUBOPT_0x0
                 ; 0000 0050             #asm("sei")
0000a6 9478      	sei
                 ; 0000 0051          }
                 _0x10:
                 ; 0000 0052       }
                 ; 0000 0053 
                 ; 0000 0054       if(get_status == GET_STATUS_GETTING){
                 _0x9:
0000a7 e0e1      	LDI  R30,LOW(1)
0000a8 15e3      	CP   R30,R3
0000a9 f4d1      	BRNE _0x11
                 ; 0000 0055          if(rx_counter0 >= len - 1){
0000aa 2de6      	MOV  R30,R6
0000ab e0f0      	LDI  R31,0
0000ac 9731      	SBIW R30,1
0000ad 91a0 0302 	LDS  R26,_rx_counter0
0000af e0b0      	LDI  R27,0
0000b0 17ae      	CP   R26,R30
0000b1 07bf      	CPC  R27,R31
0000b2 f08c      	BRLT _0x12
                 ; 0000 0056             memcpy(&request, &rx_buffer0, len + 2);
0000b3 e9ef      	LDI  R30,LOW(_request)
0000b4 e0f3      	LDI  R31,HIGH(_request)
0000b5 93fa      	ST   -Y,R31
0000b6 93ea      	ST   -Y,R30
0000b7 e0e3      	LDI  R30,LOW(_rx_buffer0)
0000b8 e0f3      	LDI  R31,HIGH(_rx_buffer0)
0000b9 93fa      	ST   -Y,R31
0000ba 93ea      	ST   -Y,R30
0000bb 2de6      	MOV  R30,R6
0000bc e0f0      	LDI  R31,0
0000bd 9632      	ADIW R30,2
0000be 01df      	MOVW R26,R30
0000bf 940e 031e 	CALL _memcpy
                 ; 0000 0057             get_status =  GET_STATUS_COMPLETE;
0000c1 2433      	CLR  R3
                 ; 0000 0058 
                 ; 0000 0059             return true;
0000c2 e0e1      	LDI  R30,LOW(1)
0000c3 9508      	RET
                 ; 0000 005A          }
                 ; 0000 005B       }
                 _0x12:
                 ; 0000 005C 
                 ; 0000 005D       return false;
                 _0x11:
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 9508      	RET
                 ; 0000 005E }
                 ; .FEND
                 ;
                 ;void process_request(){
                 ; 0000 0060 void process_request(){
                 _process_request:
                 ; .FSTART _process_request
                 ; 0000 0061    unsigned char len = request.len;
                 ; 0000 0062 
                 ; 0000 0063    if(checksum(&request.len, len) != 0){
0000c6 931a      	ST   -Y,R17
                 ;	len -> R17
                +
0000c7 91e0 03a1+LDS R30 , _request + ( 2 )
                 	__GETB1MN _request,2
0000c9 2f1e      	MOV  R17,R30
                +
0000ca eae1     +LDI R30 , LOW ( _request + ( 2 ) )
0000cb e0f3     +LDI R31 , HIGH ( _request + ( 2 ) )
                 	__POINTW1MN _request,2
0000cc 93fa      	ST   -Y,R31
0000cd 93ea      	ST   -Y,R30
0000ce 2fa1      	MOV  R26,R17
0000cf d007      	RCALL _checksum
0000d0 30e0      	CPI  R30,0
0000d1 f011      	BREQ _0x13
                 ; 0000 0064       response_error_checksum();
0000d2 d01c      	RCALL _response_error_checksum
                 ; 0000 0065    }else{
0000d3 c001      	RJMP _0x14
                 _0x13:
                 ; 0000 0066       execute_cmd();
0000d4 d029      	RCALL _execute_cmd
                 ; 0000 0067    }
                 _0x14:
                 ; 0000 0068 }
0000d5 940c 02e6 	JMP  _0x2060001
                 ; .FEND
                 ;
                 ;unsigned char checksum(unsigned char *dat, unsigned char len){
                 ; 0000 006A unsigned char checksum(unsigned char *dat, unsigned char len){
                 _checksum:
                 ; .FSTART _checksum
                 ; 0000 006B    unsigned char ck  = 0;
                 ; 0000 006C    unsigned char i = 0;
                 ; 0000 006D 
                 ; 0000 006E    for(i = 0; i<len; i++){
0000d7 93aa      	ST   -Y,R26
0000d8 931a      	ST   -Y,R17
0000d9 930a      	ST   -Y,R16
                 ;	*dat -> Y+3
                 ;	len -> Y+2
                 ;	ck -> R17
                 ;	i -> R16
0000da e010      	LDI  R17,0
0000db e000      	LDI  R16,0
0000dc e000      	LDI  R16,LOW(0)
                 _0x16:
0000dd 81ea      	LDD  R30,Y+2
0000de 170e      	CP   R16,R30
0000df f450      	BRSH _0x17
                 ; 0000 006F       ck += *(dat + i);
0000e0 2fe0      	MOV  R30,R16
0000e1 e0f0      	LDI  R31,0
0000e2 81ab      	LDD  R26,Y+3
0000e3 81bc      	LDD  R27,Y+3+1
0000e4 0fae      	ADD  R26,R30
0000e5 1fbf      	ADC  R27,R31
0000e6 91ec      	LD   R30,X
0000e7 0f1e      	ADD  R17,R30
                 ; 0000 0070    }
0000e8 5f0f      	SUBI R16,-1
0000e9 cff3      	RJMP _0x16
                 _0x17:
                 ; 0000 0071 
                 ; 0000 0072    return ck;
0000ea 2fe1      	MOV  R30,R17
0000eb 8119      	LDD  R17,Y+1
0000ec 8108      	LDD  R16,Y+0
0000ed 9625      	ADIW R28,5
0000ee 9508      	RET
                 ; 0000 0073 }
                 ; .FEND
                 ;
                 ;void response_error_checksum(){
                 ; 0000 0075 void response_error_checksum(){
                 _response_error_checksum:
                 ; .FSTART _response_error_checksum
                 ; 0000 0076     unsigned char status = STATUS_ERROR_CHECKSUM;
                 ; 0000 0077     send_respond((char *)&status, sizeof(status));
0000ef 931a      	ST   -Y,R17
                 ;	status -> R17
0000f0 e012      	LDI  R17,2
0000f1 b7ed      	IN   R30,SPL
0000f2 b7fe      	IN   R31,SPH
0000f3 9731      	SBIW R30,1
0000f4 93fa      	ST   -Y,R31
0000f5 93ea      	ST   -Y,R30
0000f6 932f      	PUSH R18
0000f7 931f      	PUSH R17
0000f8 940e 034d 	CALL SUBOPT_0x1
0000fa 911f      	POP  R17
0000fb 912f      	POP  R18
                 ; 0000 0078 }
0000fc 940c 02e6 	JMP  _0x2060001
                 ; .FEND
                 ;
                 ;void execute_cmd(){
                 ; 0000 007A void execute_cmd(){
                 _execute_cmd:
                 ; .FSTART _execute_cmd
                 ; 0000 007B     unsigned char status;
                 ; 0000 007C     switch(request.opcode){
0000fe 931a      	ST   -Y,R17
                 ;	status -> R17
                +
0000ff 91e0 03a4+LDS R30 , _request + ( 5 )
                 	__GETB1MN _request,5
000101 e0f0      	LDI  R31,0
                 ; 0000 007D     case CMD_READ_VERSION:
000102 30e1      	CPI  R30,LOW(0x1)
000103 e0a0      	LDI  R26,HIGH(0x1)
000104 07fa      	CPC  R31,R26
000105 f411      	BRNE _0x1B
                 ; 0000 007E         process_read_version();
000106 d06b      	RCALL _process_read_version
                 ; 0000 007F         break;
000107 c01e      	RJMP _0x1A
                 ; 0000 0080     case CMD_TEST_TRANSFER:
                 _0x1B:
000108 30e2      	CPI  R30,LOW(0x2)
000109 e0a0      	LDI  R26,HIGH(0x2)
00010a 07fa      	CPC  R31,R26
00010b f411      	BRNE _0x1C
                 ; 0000 0081         process_test_transfer();
00010c d01b      	RCALL _process_test_transfer
                 ; 0000 0082         break;
00010d c018      	RJMP _0x1A
                 ; 0000 0083     case CMD_WRITE_REGISTER:
                 _0x1C:
00010e 30e3      	CPI  R30,LOW(0x3)
00010f e0a0      	LDI  R26,HIGH(0x3)
000110 07fa      	CPC  R31,R26
000111 f411      	BRNE _0x1D
                 ; 0000 0084         process_write_register();
000112 d0a1      	RCALL _process_write_register
                 ; 0000 0085         break;
000113 c012      	RJMP _0x1A
                 ; 0000 0086     case CMD_UPGRADE_START:
                 _0x1D:
000114 30e4      	CPI  R30,LOW(0x4)
000115 e0a0      	LDI  R26,HIGH(0x4)
000116 07fa      	CPC  R31,R26
000117 f411      	BRNE _0x1F
                 ; 0000 0087         process_upgrade_start();
000118 d042      	RCALL _process_upgrade_start
                 ; 0000 0088         break;
000119 c00c      	RJMP _0x1A
                 ; 0000 0089     default:
                 _0x1F:
                 ; 0000 008A         status = STATUS_UNSUPPORT;
00011a e013      	LDI  R17,LOW(3)
                 ; 0000 008B         send_respond((char *)&status, sizeof(status));
00011b b7ed      	IN   R30,SPL
00011c b7fe      	IN   R31,SPH
00011d 9731      	SBIW R30,1
00011e 93fa      	ST   -Y,R31
00011f 93ea      	ST   -Y,R30
000120 932f      	PUSH R18
000121 931f      	PUSH R17
000122 940e 034d 	CALL SUBOPT_0x1
000124 911f      	POP  R17
000125 912f      	POP  R18
                 ; 0000 008C         break;
                 ; 0000 008D     }
                 _0x1A:
                 ; 0000 008E }
000126 940c 02e6 	JMP  _0x2060001
                 ; .FEND
                 ;
                 ;void process_test_transfer(){
                 ; 0000 0090 void process_test_transfer(){
                 _process_test_transfer:
                 ; .FSTART _process_test_transfer
                 ; 0000 0091     test_transfer_respond_t respond;
                 ; 0000 0092 
                 ; 0000 0093     memcpy(&test_transfer_request, request.payload, sizeof(test_transfer_request));
000128 97ef      	SBIW R28,63
000129 97ef      	SBIW R28,63
00012a 9724      	SBIW R28,4
                 ;	respond -> Y+0
00012b eded      	LDI  R30,LOW(_test_transfer_request)
00012c e0f4      	LDI  R31,HIGH(_test_transfer_request)
00012d 940e 0351 	CALL SUBOPT_0x2
00012f e8a1      	LDI  R26,LOW(129)
000130 e0b0      	LDI  R27,0
000131 940e 031e 	CALL _memcpy
                 ; 0000 0094     respond.status = STATUS_SUCCESS;
000133 e0e0      	LDI  R30,LOW(0)
000134 83e8      	ST   Y,R30
                 ; 0000 0095     respond.len = test_transfer_request.len;
000135 91e0 04dd 	LDS  R30,_test_transfer_request
000137 83e9      	STD  Y+1,R30
                 ; 0000 0096     if(respond.len > 128){
000138 81a9      	LDD  R26,Y+1
000139 38a1      	CPI  R26,LOW(0x81)
00013a f040      	BRLO _0x20
                 ; 0000 0097         respond.status = STATUS_FAIL;
00013b e0e1      	LDI  R30,LOW(1)
00013c 83e8      	ST   Y,R30
                 ; 0000 0098         send_respond((char*)&respond.status, sizeof(respond.status));
00013d 01fe      	MOVW R30,R28
00013e 93fa      	ST   -Y,R31
00013f 93ea      	ST   -Y,R30
000140 e0a1      	LDI  R26,LOW(1)
000141 e0b0      	LDI  R27,0
000142 c013      	RJMP _0x28
                 ; 0000 0099     }else{
                 _0x20:
                 ; 0000 009A         memcpy(&respond.data, test_transfer_request.data, respond.len);
000143 01fe      	MOVW R30,R28
000144 9632      	ADIW R30,2
000145 93fa      	ST   -Y,R31
000146 93ea      	ST   -Y,R30
                +
000147 edee     +LDI R30 , LOW ( _test_transfer_request + ( 1 ) )
000148 e0f4     +LDI R31 , HIGH ( _test_transfer_request + ( 1 ) )
                 	__POINTW1MN _test_transfer_request,1
000149 93fa      	ST   -Y,R31
00014a 93ea      	ST   -Y,R30
00014b 81ad      	LDD  R26,Y+5
00014c 27bb      	CLR  R27
00014d 940e 031e 	CALL _memcpy
                 ; 0000 009B         send_respond((char*)&respond, respond.len + 2);
00014f 01fe      	MOVW R30,R28
000150 93fa      	ST   -Y,R31
000151 93ea      	ST   -Y,R30
000152 81eb      	LDD  R30,Y+3
000153 e0f0      	LDI  R31,0
000154 9632      	ADIW R30,2
000155 01df      	MOVW R26,R30
                 _0x28:
000156 d08c      	RCALL _send_respond
                 ; 0000 009C     }
                 ; 0000 009D }
000157 96ef      	ADIW R28,63
000158 96ef      	ADIW R28,63
000159 9624      	ADIW R28,4
00015a 9508      	RET
                 ; .FEND
                 ;
                 ;void process_upgrade_start(){
                 ; 0000 009F void process_upgrade_start(){
                 _process_upgrade_start:
                 ; .FSTART _process_upgrade_start
                 ; 0000 00A0     unsigned char status = STATUS_SUCCESS;
                 ; 0000 00A1     send_respond((char*)&status, sizeof(status));
00015b 931a      	ST   -Y,R17
                 ;	status -> R17
00015c e010      	LDI  R17,0
00015d b7ed      	IN   R30,SPL
00015e b7fe      	IN   R31,SPH
00015f 9731      	SBIW R30,1
000160 93fa      	ST   -Y,R31
000161 93ea      	ST   -Y,R30
000162 932f      	PUSH R18
000163 931f      	PUSH R17
000164 940e 034d 	CALL SUBOPT_0x1
000166 911f      	POP  R17
000167 912f      	POP  R18
                 ; 0000 00A2 
                 ; 0000 00A3     delay_ms(10);
000168 e0aa      	LDI  R26,LOW(10)
000169 e0b0      	LDI  R27,0
00016a 940e 0358 	CALL _delay_ms
                 ; 0000 00A4     #asm("cli")
00016c 94f8      	cli
                 ; 0000 00A5     #asm
                 ; 0000 00A6         LDI     R31, 0x38
00016d e3f8              LDI     R31, 0x38
                 ; 0000 00A7         LDI     R30, 0x00
00016e e0e0              LDI     R30, 0x00
                 ; 0000 00A8         IJMP              ;Jump to address 0x3800
00016f 9409              IJMP              ;Jump to address 0x3800
                 ; 0000 00A9     #endasm
                 ; 0000 00AA }
000170 940c 02e6 	JMP  _0x2060001
                 ; .FEND
                 ;
                 ;void process_read_version(){
                 ; 0000 00AC void process_read_version(){
                 _process_read_version:
                 ; .FSTART _process_read_version
                 ; 0000 00AD     char *c;
                 ; 0000 00AE     char str[] = "0.0.0";
                 ; 0000 00AF     respond_read_version_t res;
                 ; 0000 00B0     unsigned char hw0 = PIND.6;
                 ; 0000 00B1     unsigned char hw1 = PIND.7;
                 ; 0000 00B2     //hw_version = (hw1 << 1) | (hw0 << 0);
                 ; 0000 00B3 
                 ; 0000 00B4     res.status = STATUS_SUCCESS;
000172 9761      	SBIW R28,17
000173 e3e0      	LDI  R30,LOW(48)
000174 87eb      	STD  Y+11,R30
000175 e2ee      	LDI  R30,LOW(46)
000176 87ec      	STD  Y+12,R30
000177 e3e0      	LDI  R30,LOW(48)
000178 87ed      	STD  Y+13,R30
000179 e2ee      	LDI  R30,LOW(46)
00017a 87ee      	STD  Y+14,R30
00017b e3e0      	LDI  R30,LOW(48)
00017c 87ef      	STD  Y+15,R30
00017d e0e0      	LDI  R30,LOW(0)
00017e 8be8      	STD  Y+16,R30
00017f 940e 0362 	CALL __SAVELOCR4
                 ;	*c -> R16,R17
                 ;	str -> Y+15
                 ;	res -> Y+4
                 ;	hw0 -> R19
                 ;	hw1 -> R18
000181 e0e0      	LDI  R30,0
000182 994e      	SBIC 0x9,6
000183 e0e1      	LDI  R30,1
000184 2f3e      	MOV  R19,R30
000185 e0e0      	LDI  R30,0
000186 994f      	SBIC 0x9,7
000187 e0e1      	LDI  R30,1
000188 2f2e      	MOV  R18,R30
000189 e0e0      	LDI  R30,LOW(0)
00018a 83ec      	STD  Y+4,R30
                 ; 0000 00B5     hw_version = hw1 * 2 + hw0 + 1;
00018b 2fe2      	MOV  R30,R18
00018c 0fee      	LSL  R30
00018d 0fe3      	ADD  R30,R19
00018e 5fef      	SUBI R30,-LOW(1)
00018f 2e4e      	MOV  R4,R30
                 ; 0000 00B6     strncpy(res.hw_version, str, 5);
000190 01fe      	MOVW R30,R28
000191 9635      	ADIW R30,5
000192 93fa      	ST   -Y,R31
000193 93ea      	ST   -Y,R30
000194 01fe      	MOVW R30,R28
000195 9671      	ADIW R30,17
000196 93fa      	ST   -Y,R31
000197 93ea      	ST   -Y,R30
000198 e0a5      	LDI  R26,LOW(5)
000199 940e 0330 	CALL _strncpy
                 ; 0000 00B7     res.hw_version[0] = hw_version + 0x30;
00019b 2de4      	MOV  R30,R4
00019c 5de0      	SUBI R30,-LOW(48)
00019d 83ed      	STD  Y+5,R30
                 ; 0000 00B8     strncpy(res.fw_version, fw_version, 5);
00019e 01fe      	MOVW R30,R28
00019f 963a      	ADIW R30,10
0001a0 93fa      	ST   -Y,R31
0001a1 93ea      	ST   -Y,R30
0001a2 e9e9      	LDI  R30,LOW(_fw_version)
0001a3 e0f3      	LDI  R31,HIGH(_fw_version)
0001a4 93fa      	ST   -Y,R31
0001a5 93ea      	ST   -Y,R30
0001a6 e0a5      	LDI  R26,LOW(5)
0001a7 940e 0330 	CALL _strncpy
                 ; 0000 00B9     send_respond((char *)&res, sizeof(res));
0001a9 01fe      	MOVW R30,R28
0001aa 9634      	ADIW R30,4
0001ab 93fa      	ST   -Y,R31
0001ac 93ea      	ST   -Y,R30
0001ad e0ab      	LDI  R26,LOW(11)
0001ae e0b0      	LDI  R27,0
0001af d033      	RCALL _send_respond
                 ; 0000 00BA }
0001b0 940e 0367 	CALL __LOADLOCR4
0001b2 9665      	ADIW R28,21
0001b3 9508      	RET
                 ; .FEND
                 ;
                 ;void process_write_register(){
                 ; 0000 00BC void process_write_register(){
                 _process_write_register:
                 ; .FSTART _process_write_register
                 ; 0000 00BD     unsigned char status = STATUS_SUCCESS;
                 ; 0000 00BE     memcpy(&pl_write_register, request.payload, sizeof(pl_write_register));
0001b4 931a      	ST   -Y,R17
                 ;	status -> R17
0001b5 e010      	LDI  R17,0
0001b6 ede7      	LDI  R30,LOW(_pl_write_register)
0001b7 e0f4      	LDI  R31,HIGH(_pl_write_register)
0001b8 940e 0351 	CALL SUBOPT_0x2
0001ba e0a6      	LDI  R26,LOW(6)
0001bb e0b0      	LDI  R27,0
0001bc 940e 031e 	CALL _memcpy
                 ; 0000 00BF 
                 ; 0000 00C0     TCCR1A = pl_write_register.reg_TCCR1A;
0001be 91e0 04d7 	LDS  R30,_pl_write_register
0001c0 93e0 0080 	STS  128,R30
                 ; 0000 00C1     TCCR1B = pl_write_register.reg_TCCR1B;
                +
0001c2 91e0 04d8+LDS R30 , _pl_write_register + ( 1 )
                 	__GETB1MN _pl_write_register,1
0001c4 93e0 0081 	STS  129,R30
                 ; 0000 00C2     ICR1H = pl_write_register.reg_ICR1H;
                +
0001c6 91e0 04d9+LDS R30 , _pl_write_register + ( 2 )
                 	__GETB1MN _pl_write_register,2
0001c8 93e0 0087 	STS  135,R30
                 ; 0000 00C3     ICR1L = pl_write_register.reg_ICR1L;
                +
0001ca 91e0 04da+LDS R30 , _pl_write_register + ( 3 )
                 	__GETB1MN _pl_write_register,3
0001cc 93e0 0086 	STS  134,R30
                 ; 0000 00C4     OCR1AH= pl_write_register.reg_OCR1AH;
                +
0001ce 91e0 04db+LDS R30 , _pl_write_register + ( 4 )
                 	__GETB1MN _pl_write_register,4
0001d0 93e0 0089 	STS  137,R30
                 ; 0000 00C5     OCR1AL=pl_write_register.reg_OCR1AL;
                +
0001d2 91e0 04dc+LDS R30 , _pl_write_register + ( 5 )
                 	__GETB1MN _pl_write_register,5
0001d4 93e0 0088 	STS  136,R30
                 ; 0000 00C6 
                 ; 0000 00C7     send_respond((char*)&status, sizeof(status));
0001d6 b7ed      	IN   R30,SPL
0001d7 b7fe      	IN   R31,SPH
0001d8 9731      	SBIW R30,1
0001d9 93fa      	ST   -Y,R31
0001da 93ea      	ST   -Y,R30
0001db 932f      	PUSH R18
0001dc 931f      	PUSH R17
0001dd 940e 034d 	CALL SUBOPT_0x1
0001df 911f      	POP  R17
0001e0 912f      	POP  R18
                 ; 0000 00C8 }
0001e1 940c 02e6 	JMP  _0x2060001
                 ; .FEND
                 ;
                 ;void send_respond(char * payload, unsigned short len){
                 ; 0000 00CA void send_respond(char * payload, unsigned short len){
                 _send_respond:
                 ; .FSTART _send_respond
                 ; 0000 00CB     unsigned char i;
                 ; 0000 00CC     unsigned char checksum = 0;
                 ; 0000 00CD     unsigned char *c;
                 ; 0000 00CE     respond.header = 0x55FF;
0001e3 93ba      	ST   -Y,R27
0001e4 93aa      	ST   -Y,R26
0001e5 940e 0362 	CALL __SAVELOCR4
                 ;	*payload -> Y+6
                 ;	len -> Y+4
                 ;	i -> R17
                 ;	checksum -> R16
                 ;	*c -> R18,R19
0001e7 e000      	LDI  R16,0
0001e8 efef      	LDI  R30,LOW(22015)
0001e9 e5f5      	LDI  R31,HIGH(22015)
0001ea 93e0 043b 	STS  _respond,R30
0001ec 93f0 043c 	STS  _respond+1,R31
                 ; 0000 00CF     respond.len = 5 + len;
0001ee 81ec      	LDD  R30,Y+4
0001ef 5feb      	SUBI R30,-LOW(5)
                +
0001f0 93e0 043d+STS _respond + ( 2 ) , R30
                 	__PUTB1MN _respond,2
                 ; 0000 00D0     respond.tranId = request.tranId;
                +
0001f2 91e0 03a3+LDS R30 , _request + ( 4 )
                 	__GETB1MN _request,4
                +
0001f4 93e0 043f+STS _respond + ( 4 ) , R30
                 	__PUTB1MN _respond,4
                 ; 0000 00D1     respond.opcode = request.opcode;
                +
0001f6 91e0 03a4+LDS R30 , _request + ( 5 )
                 	__GETB1MN _request,5
                +
0001f8 93e0 0440+STS _respond + ( 5 ) , R30
                 	__PUTB1MN _respond,5
                 ; 0000 00D2     respond.type = TYPE_RESPOND;
0001fa e0e2      	LDI  R30,LOW(2)
                +
0001fb 93e0 043e+STS _respond + ( 3 ) , R30
                 	__PUTB1MN _respond,3
                 ; 0000 00D3 
                 ; 0000 00D4     memcpy(respond.payload, payload, len);
                +
0001fd e4e1     +LDI R30 , LOW ( _respond + ( 6 ) )
0001fe e0f4     +LDI R31 , HIGH ( _respond + ( 6 ) )
                 	__POINTW1MN _respond,6
0001ff 93fa      	ST   -Y,R31
000200 93ea      	ST   -Y,R30
000201 85e8      	LDD  R30,Y+8
000202 85f9      	LDD  R31,Y+8+1
000203 93fa      	ST   -Y,R31
000204 93ea      	ST   -Y,R30
000205 85a8      	LDD  R26,Y+8
000206 85b9      	LDD  R27,Y+8+1
000207 940e 031e 	CALL _memcpy
                 ; 0000 00D5 
                 ; 0000 00D6     for(i = 0; i< respond.len - 1; i++){
000209 e010      	LDI  R17,LOW(0)
                 _0x23:
                +
00020a 91e0 043d+LDS R30 , _respond + ( 2 )
                 	__GETB1MN _respond,2
00020c e0f0      	LDI  R31,0
00020d 9731      	SBIW R30,1
00020e 2fa1      	MOV  R26,R17
00020f e0b0      	LDI  R27,0
000210 17ae      	CP   R26,R30
000211 07bf      	CPC  R27,R31
000212 f44c      	BRGE _0x24
                 ; 0000 00D7         checksum += *(&respond.len + i);
                +
000213 e3ad     +LDI R26 , LOW ( _respond + ( 2 ) )
000214 e0b4     +LDI R27 , HIGH ( _respond + ( 2 ) )
                 	__POINTW2MN _respond,2
000215 27ee      	CLR  R30
000216 0fa1      	ADD  R26,R17
000217 1fbe      	ADC  R27,R30
000218 91ec      	LD   R30,X
000219 0f0e      	ADD  R16,R30
                 ; 0000 00D8     }
00021a 5f1f      	SUBI R17,-1
00021b cfee      	RJMP _0x23
                 _0x24:
                 ; 0000 00D9 
                 ; 0000 00DA     checksum = ~checksum + 1;
00021c 9501      	NEG  R16
                 ; 0000 00DB 
                 ; 0000 00DC     c = (char*)&respond;
                +
00021d e32b     +LDI R18 , LOW ( _respond )
00021e e034     +LDI R19 , HIGH ( _respond )
                 	__POINTWRM 18,19,_respond
                 ; 0000 00DD     for(i = 0; i<respond.len + 2; i++){
00021f e010      	LDI  R17,LOW(0)
                 _0x26:
                +
000220 91e0 043d+LDS R30 , _respond + ( 2 )
                 	__GETB1MN _respond,2
000222 e0f0      	LDI  R31,0
000223 9632      	ADIW R30,2
000224 2fa1      	MOV  R26,R17
000225 e0b0      	LDI  R27,0
000226 17ae      	CP   R26,R30
000227 07bf      	CPC  R27,R31
000228 f44c      	BRGE _0x27
                 ; 0000 00DE         putchar(c[i]);
000229 01d9      	MOVW R26,R18
00022a 27ee      	CLR  R30
00022b 0fa1      	ADD  R26,R17
00022c 1fbe      	ADC  R27,R30
00022d 91ac      	LD   R26,X
00022e 940e 0300 	CALL _putchar
                 ; 0000 00DF     }
000230 5f1f      	SUBI R17,-1
000231 cfee      	RJMP _0x26
                 _0x27:
                 ; 0000 00E0     putchar(checksum);
000232 2fa0      	MOV  R26,R16
000233 940e 0300 	CALL _putchar
                 ; 0000 00E1 }
000235 940e 0367 	CALL __LOADLOCR4
000237 9628      	ADIW R28,8
000238 9508      	RET
                 ; .FEND
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "system.h"
                 ;
                 ;void system_init(){
                 ; 0001 0004 void system_init(){
                 
                 	.CSEG
                 _system_init:
                 ; .FSTART _system_init
                 ; 0001 0005    // Crystal Oscillator division factor: 1
                 ; 0001 0006    #pragma optsize-
                 ; 0001 0007    CLKPR=(1<<CLKPCE);
000239 e8e0      	LDI  R30,LOW(128)
00023a 93e0 0061 	STS  97,R30
                 ; 0001 0008    CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00023c e0e0      	LDI  R30,LOW(0)
00023d 93e0 0061 	STS  97,R30
                 ; 0001 0009    #ifdef _OPTIMIZE_SIZE_
                 ; 0001 000A    #pragma optsize+
                 ; 0001 000B    #endif
                 ; 0001 000C 
                 ; 0001 000D    // Input/Output Ports initialization
                 ; 0001 000E    // Port B initialization
                 ; 0001 000F    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=In
                 ; 0001 0010    DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
00023f e2e2      	LDI  R30,LOW(34)
000240 b9e4      	OUT  0x4,R30
                 ; 0001 0011    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=T
                 ; 0001 0012    PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000241 e0e0      	LDI  R30,LOW(0)
000242 b9e5      	OUT  0x5,R30
                 ; 0001 0013 
                 ; 0001 0014    // Port C initialization
                 ; 0001 0015    // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0016    DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000243 b9e7      	OUT  0x7,R30
                 ; 0001 0017    // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0018    PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000244 b9e8      	OUT  0x8,R30
                 ; 0001 0019 
                 ; 0001 001A    // Port D initialization
                 ; 0001 001B    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 001C    DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000245 b9ea      	OUT  0xA,R30
                 ; 0001 001D    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 001E    PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000246 b9eb      	OUT  0xB,R30
                 ; 0001 001F 
                 ; 0001 0020    // Timer/Counter 0 initialization
                 ; 0001 0021    // Clock source: System Clock
                 ; 0001 0022    // Clock value: Timer 0 Stopped
                 ; 0001 0023    // Mode: Normal top=0xFF
                 ; 0001 0024    // OC0A output: Disconnected
                 ; 0001 0025    // OC0B output: Disconnected
                 ; 0001 0026    TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000247 bde4      	OUT  0x24,R30
                 ; 0001 0027    TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000248 bde5      	OUT  0x25,R30
                 ; 0001 0028    TCNT0=0x00;
000249 bde6      	OUT  0x26,R30
                 ; 0001 0029    OCR0A=0x00;
00024a bde7      	OUT  0x27,R30
                 ; 0001 002A    OCR0B=0x00;
00024b bde8      	OUT  0x28,R30
                 ; 0001 002B 
                 ; 0001 002C    // Timer/Counter 1 initialization
                 ; 0001 002D    // Clock source: System Clock
                 ; 0001 002E    // Clock value: 16000.000 kHz
                 ; 0001 002F    // Mode: Fast PWM top=ICR1
                 ; 0001 0030    // OC1A output: Non-Inverted PWM
                 ; 0001 0031    // OC1B output: Disconnected
                 ; 0001 0032    // Noise Canceler: Off
                 ; 0001 0033    // Input Capture on Falling Edge
                 ; 0001 0034    // Timer Period: 1 ms
                 ; 0001 0035    // Output Pulse(s):
                 ; 0001 0036    // OC1A Period: 1 ms Width: 0.50003 ms
                 ; 0001 0037    // Timer1 Overflow Interrupt: Off
                 ; 0001 0038    // Input Capture Interrupt: Off
                 ; 0001 0039    // Compare A Match Interrupt: Off
                 ; 0001 003A    // Compare B Match Interrupt: Off
                 ; 0001 003B    TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
00024c e8e2      	LDI  R30,LOW(130)
00024d 93e0 0080 	STS  128,R30
                 ; 0001 003C    TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
00024f e1e9      	LDI  R30,LOW(25)
000250 93e0 0081 	STS  129,R30
                 ; 0001 003D    TCNT1H=0;
000252 e0e0      	LDI  R30,LOW(0)
000253 93e0 0085 	STS  133,R30
                 ; 0001 003E    TCNT1L=0;
000255 93e0 0084 	STS  132,R30
                 ; 0001 003F    ICR1H=0x00;
000257 93e0 0087 	STS  135,R30
                 ; 0001 0040    ICR1L=0x00;
000259 93e0 0086 	STS  134,R30
                 ; 0001 0041    OCR1AH=0x00;
00025b 93e0 0089 	STS  137,R30
                 ; 0001 0042    OCR1AL=0x00;
00025d 93e0 0088 	STS  136,R30
                 ; 0001 0043    OCR1BH=0x00;
00025f 93e0 008b 	STS  139,R30
                 ; 0001 0044    OCR1BL=0x00;
000261 93e0 008a 	STS  138,R30
                 ; 0001 0045 
                 ; 0001 0046    // Timer/Counter 2 initialization
                 ; 0001 0047    // Clock source: System Clock
                 ; 0001 0048    // Clock value: Timer2 Stopped
                 ; 0001 0049    // Mode: Normal top=0xFF
                 ; 0001 004A    // OC2A output: Disconnected
                 ; 0001 004B    // OC2B output: Disconnected
                 ; 0001 004C    ASSR=(0<<EXCLK) | (0<<AS2);
000263 93e0 00b6 	STS  182,R30
                 ; 0001 004D    TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000265 93e0 00b0 	STS  176,R30
                 ; 0001 004E    TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000267 93e0 00b1 	STS  177,R30
                 ; 0001 004F    TCNT2=0x00;
000269 93e0 00b2 	STS  178,R30
                 ; 0001 0050    OCR2A=0x00;
00026b 93e0 00b3 	STS  179,R30
                 ; 0001 0051    OCR2B=0x00;
00026d 93e0 00b4 	STS  180,R30
                 ; 0001 0052 
                 ; 0001 0053    // Timer/Counter 0 Interrupt(s) initialization
                 ; 0001 0054    TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
00026f 93e0 006e 	STS  110,R30
                 ; 0001 0055 
                 ; 0001 0056    // Timer/Counter 1 Interrupt(s) initialization
                 ; 0001 0057    TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
000271 93e0 006f 	STS  111,R30
                 ; 0001 0058 
                 ; 0001 0059    // Timer/Counter 2 Interrupt(s) initialization
                 ; 0001 005A    TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
000273 93e0 0070 	STS  112,R30
                 ; 0001 005B 
                 ; 0001 005C    // External Interrupt(s) initialization
                 ; 0001 005D    // INT0: Off
                 ; 0001 005E    // INT1: Off
                 ; 0001 005F    // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0060    // Interrupt on any change on pins PCINT8-14: Off
                 ; 0001 0061    // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 0062    EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000275 93e0 0069 	STS  105,R30
                 ; 0001 0063    EIMSK=(0<<INT1) | (0<<INT0);
000277 bbed      	OUT  0x1D,R30
                 ; 0001 0064    PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
000278 93e0 0068 	STS  104,R30
                 ; 0001 0065 
                 ; 0001 0066    // USART initialization
                 ; 0001 0067    // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 0068    // USART Receiver: On
                 ; 0001 0069    // USART Transmitter: On
                 ; 0001 006A    // USART0 Mode: Asynchronous
                 ; 0001 006B    // USART Baud Rate: 57600 (Double Speed Mode)
                 ; 0001 006C    //UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (1<<U2X0) | (0<<MPCM0);
                 ; 0001 006D    //UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
                 ; 0001 006E    //UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0) ...
                 ; 0001 006F    //UBRR0H=0x00;
                 ; 0001 0070    //UBRR0L=0x22;
                 ; 0001 0071 
                 ; 0001 0072    UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (1<<U2X0) | (0<<MPCM0);
00027a e0e2      	LDI  R30,LOW(2)
00027b 93e0 00c0 	STS  192,R30
                 ; 0001 0073    UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00027d ede8      	LDI  R30,LOW(216)
00027e 93e0 00c1 	STS  193,R30
                 ; 0001 0074    UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000280 e0e6      	LDI  R30,LOW(6)
000281 93e0 00c2 	STS  194,R30
                 ; 0001 0075    UBRR0H=0x00;
000283 e0e0      	LDI  R30,LOW(0)
000284 93e0 00c5 	STS  197,R30
                 ; 0001 0076    UBRR0L=0x22;
000286 e2e2      	LDI  R30,LOW(34)
000287 93e0 00c4 	STS  196,R30
                 ; 0001 0077 
                 ; 0001 0078    // Analog Comparator initialization
                 ; 0001 0079    // Analog Comparator: Off
                 ; 0001 007A    // The Analog Comparator's positive input is
                 ; 0001 007B    // connected to the AIN0 pin
                 ; 0001 007C    // The Analog Comparator's negative input is
                 ; 0001 007D    // connected to the AIN1 pin
                 ; 0001 007E    ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000289 e8e0      	LDI  R30,LOW(128)
00028a bfe0      	OUT  0x30,R30
                 ; 0001 007F    ADCSRB=(0<<ACME);
00028b e0e0      	LDI  R30,LOW(0)
00028c 93e0 007b 	STS  123,R30
                 ; 0001 0080    // Digital input buffer on AIN0: On
                 ; 0001 0081    // Digital input buffer on AIN1: On
                 ; 0001 0082    DIDR1=(0<<AIN0D) | (0<<AIN1D);
00028e 93e0 007f 	STS  127,R30
                 ; 0001 0083 
                 ; 0001 0084    // ADC initialization
                 ; 0001 0085    // ADC disabled
                 ; 0001 0086    ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000290 93e0 007a 	STS  122,R30
                 ; 0001 0087 
                 ; 0001 0088    // SPI initialization
                 ; 0001 0089    // SPI disabled
                 ; 0001 008A    SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000292 bdec      	OUT  0x2C,R30
                 ; 0001 008B 
                 ; 0001 008C    // TWI initialization
                 ; 0001 008D    // TWI disabled
                 ; 0001 008E    TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000293 93e0 00bc 	STS  188,R30
                 ; 0001 008F }
000295 9508      	RET
                 ; .FEND
                 ;#include "main.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "protocol.h"
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART Receiver buffer
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0002 001E {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000296 93aa      	ST   -Y,R26
000297 93ea      	ST   -Y,R30
000298 93fa      	ST   -Y,R31
000299 b7ef      	IN   R30,SREG
00029a 93ea      	ST   -Y,R30
                 ; 0002 001F    char status,data;
                 ; 0002 0020    status=UCSR0A;
00029b 931a      	ST   -Y,R17
00029c 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00029d 9110 00c0 	LDS  R17,192
                 ; 0002 0021    data=UDR0;
00029f 9100 00c6 	LDS  R16,198
                 ; 0002 0022    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0002a1 2fe1      	MOV  R30,R17
0002a2 71ec      	ANDI R30,LOW(0x1C)
0002a3 f4e1      	BRNE _0x40003
                 ; 0002 0023       {
                 ; 0002 0024       rx_buffer0[rx_wr_index0++]=data;
0002a4 91e0 0300 	LDS  R30,_rx_wr_index0
0002a6 5fef      	SUBI R30,-LOW(1)
0002a7 93e0 0300 	STS  _rx_wr_index0,R30
0002a9 50e1      	SUBI R30,LOW(1)
0002aa e0f0      	LDI  R31,0
0002ab 5fed      	SUBI R30,LOW(-_rx_buffer0)
0002ac 4ffc      	SBCI R31,HIGH(-_rx_buffer0)
0002ad 8300      	ST   Z,R16
                 ; 0002 0025    #if RX_BUFFER_SIZE0 == 256
                 ; 0002 0026       // special case for receiver buffer size=256
                 ; 0002 0027       if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0002 0028    #else
                 ; 0002 0029       if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0002ae 91a0 0300 	LDS  R26,_rx_wr_index0
0002b0 39a6      	CPI  R26,LOW(0x96)
0002b1 f419      	BRNE _0x40004
0002b2 e0e0      	LDI  R30,LOW(0)
0002b3 93e0 0300 	STS  _rx_wr_index0,R30
                 ; 0002 002A       if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x40004:
0002b5 91a0 0302 	LDS  R26,_rx_counter0
0002b7 5faf      	SUBI R26,-LOW(1)
0002b8 93a0 0302 	STS  _rx_counter0,R26
0002ba 39a6      	CPI  R26,LOW(0x96)
0002bb f421      	BRNE _0x40005
                 ; 0002 002B          {
                 ; 0002 002C          rx_counter0=0;
0002bc e0e0      	LDI  R30,LOW(0)
0002bd 93e0 0302 	STS  _rx_counter0,R30
                 ; 0002 002D          rx_buffer_overflow0=1;
0002bf 9af0      	SBI  0x1E,0
                 ; 0002 002E          }
                 ; 0002 002F    #endif
                 ; 0002 0030       }
                 _0x40005:
                 ; 0002 0031 }
                 _0x40003:
0002c0 9109      	LD   R16,Y+
0002c1 9119      	LD   R17,Y+
0002c2 91e9      	LD   R30,Y+
0002c3 bfef      	OUT  SREG,R30
0002c4 91f9      	LD   R31,Y+
0002c5 91e9      	LD   R30,Y+
0002c6 91a9      	LD   R26,Y+
0002c7 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0002 0038 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0002 0039    char data;
                 ; 0002 003A    while (rx_counter0==0);
0002c8 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x40008:
0002c9 91e0 0302 	LDS  R30,_rx_counter0
0002cb 30e0      	CPI  R30,0
0002cc f3e1      	BREQ _0x40008
                 ; 0002 003B    data=rx_buffer0[rx_rd_index0++];
0002cd 91e0 0301 	LDS  R30,_rx_rd_index0
0002cf 5fef      	SUBI R30,-LOW(1)
0002d0 93e0 0301 	STS  _rx_rd_index0,R30
0002d2 50e1      	SUBI R30,LOW(1)
0002d3 e0f0      	LDI  R31,0
0002d4 5fed      	SUBI R30,LOW(-_rx_buffer0)
0002d5 4ffc      	SBCI R31,HIGH(-_rx_buffer0)
0002d6 8110      	LD   R17,Z
                 ; 0002 003C    #if RX_BUFFER_SIZE0 != 256
                 ; 0002 003D    if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0002d7 91a0 0301 	LDS  R26,_rx_rd_index0
0002d9 39a6      	CPI  R26,LOW(0x96)
0002da f419      	BRNE _0x4000B
0002db e0e0      	LDI  R30,LOW(0)
0002dc 93e0 0301 	STS  _rx_rd_index0,R30
                 ; 0002 003E    #endif
                 ; 0002 003F    #asm("cli")
                 _0x4000B:
0002de 94f8      	cli
                 ; 0002 0040    --rx_counter0;
0002df 91e0 0302 	LDS  R30,_rx_counter0
0002e1 50e1      	SUBI R30,LOW(1)
0002e2 93e0 0302 	STS  _rx_counter0,R30
                 ; 0002 0041    #asm("sei")
0002e4 9478      	sei
                 ; 0002 0042    return data;
0002e5 2fe1      	MOV  R30,R17
                 _0x2060001:
0002e6 9119      	LD   R17,Y+
0002e7 9508      	RET
                 ; 0002 0043 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0002 0059 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0002e8 93ea      	ST   -Y,R30
0002e9 93fa      	ST   -Y,R31
0002ea b7ef      	IN   R30,SREG
0002eb 93ea      	ST   -Y,R30
                 ; 0002 005A    if (tx_counter0)
0002ec 2077      	TST  R7
0002ed f069      	BREQ _0x4000C
                 ; 0002 005B       {
                 ; 0002 005C       --tx_counter0;
0002ee 947a      	DEC  R7
                 ; 0002 005D       UDR0=tx_buffer0[tx_rd_index0++];
0002ef 2de8      	MOV  R30,R8
0002f0 9483      	INC  R8
0002f1 e0f0      	LDI  R31,0
0002f2 5ae2      	SUBI R30,LOW(-_tx_buffer0)
0002f3 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
0002f4 81e0      	LD   R30,Z
0002f5 93e0 00c6 	STS  198,R30
                 ; 0002 005E    #if TX_BUFFER_SIZE0 != 256
                 ; 0002 005F       if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0002f7 e0e8      	LDI  R30,LOW(8)
0002f8 15e8      	CP   R30,R8
0002f9 f409      	BRNE _0x4000D
0002fa 2488      	CLR  R8
                 ; 0002 0060    #endif
                 ; 0002 0061       }
                 _0x4000D:
                 ; 0002 0062 }
                 _0x4000C:
0002fb 91e9      	LD   R30,Y+
0002fc bfef      	OUT  SREG,R30
0002fd 91f9      	LD   R31,Y+
0002fe 91e9      	LD   R30,Y+
0002ff 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0002 0069 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0002 006A    while (tx_counter0 == TX_BUFFER_SIZE0);
000300 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x4000E:
000301 e0e8      	LDI  R30,LOW(8)
000302 15e7      	CP   R30,R7
000303 f3e9      	BREQ _0x4000E
                 ; 0002 006B    #asm("cli")
000304 94f8      	cli
                 ; 0002 006C    if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000305 2077      	TST  R7
000306 f421      	BRNE _0x40012
000307 91e0 00c0 	LDS  R30,192
000309 72e0      	ANDI R30,LOW(0x20)
00030a f469      	BRNE _0x40011
                 _0x40012:
                 ; 0002 006D       {
                 ; 0002 006E       tx_buffer0[tx_wr_index0++]=c;
00030b 2de5      	MOV  R30,R5
00030c 9453      	INC  R5
00030d e0f0      	LDI  R31,0
00030e 5ae2      	SUBI R30,LOW(-_tx_buffer0)
00030f 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
000310 81a8      	LD   R26,Y
000311 83a0      	STD  Z+0,R26
                 ; 0002 006F    #if TX_BUFFER_SIZE0 != 256
                 ; 0002 0070       if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000312 e0e8      	LDI  R30,LOW(8)
000313 15e5      	CP   R30,R5
000314 f409      	BRNE _0x40014
000315 2455      	CLR  R5
                 ; 0002 0071    #endif
                 ; 0002 0072       ++tx_counter0;
                 _0x40014:
000316 9473      	INC  R7
                 ; 0002 0073       }
                 ; 0002 0074    else
000317 c003      	RJMP _0x40015
                 _0x40011:
                 ; 0002 0075       UDR0=c;
000318 81e8      	LD   R30,Y
000319 93e0 00c6 	STS  198,R30
                 ; 0002 0076    #asm("sei")
                 _0x40015:
00031b 9478      	sei
                 ; 0002 0077 }
00031c 9621      	ADIW R28,1
00031d 9508      	RET
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 
                 	.CSEG
                 _memcpy:
                 ; .FSTART _memcpy
00031e 93ba      	ST   -Y,R27
00031f 93aa      	ST   -Y,R26
000320 8199          ldd  r25,y+1
000321 8188          ld   r24,y
000322 9600          adiw r24,0
000323 f041          breq memcpy1
000324 81bd          ldd  r27,y+5
000325 81ac          ldd  r26,y+4
000326 81fb          ldd  r31,y+3
000327 81ea          ldd  r30,y+2
                 memcpy0:
000328 9161          ld   r22,z+
000329 936d          st   x+,r22
00032a 9701          sbiw r24,1
00032b f7e1          brne memcpy0
                 memcpy1:
00032c 81fd          ldd  r31,y+5
00032d 81ec          ldd  r30,y+4
00032e 9626      	ADIW R28,6
00032f 9508      	RET
                 ; .FEND
                 _strncpy:
                 ; .FSTART _strncpy
000330 93aa      	ST   -Y,R26
000331 9179          ld   r23,y+
000332 91e9          ld   r30,y+
000333 91f9          ld   r31,y+
000334 91a9          ld   r26,y+
000335 91b9          ld   r27,y+
000336 01cd          movw r24,r26
                 strncpy0:
000337 2377          tst  r23
000338 f051          breq strncpy1
000339 957a          dec  r23
00033a 9161          ld   r22,z+
00033b 936d          st   x+,r22
00033c 2366          tst  r22
00033d f7c9          brne strncpy0
                 strncpy2:
00033e 2377          tst  r23
00033f f019          breq strncpy1
000340 957a          dec  r23
000341 936d          st   x+,r22
000342 cffb          rjmp strncpy2
                 strncpy1:
000343 01fc          movw r30,r24
000344 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_wr_index0:
000300           	.BYTE 0x1
                 _rx_rd_index0:
000301           	.BYTE 0x1
                 _rx_counter0:
000302           	.BYTE 0x1
                 _rx_buffer0:
000303           	.BYTE 0x96
                 _fw_version:
000399           	.BYTE 0x6
                 _request:
00039f           	.BYTE 0x9C
                 _respond:
00043b           	.BYTE 0x9C
                 _pl_write_register:
0004d7           	.BYTE 0x6
                 _test_transfer_request:
0004dd           	.BYTE 0x81
                 _tx_buffer0:
00055e           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
000345 e0e0      	LDI  R30,LOW(0)
000346 93e0 0301 	STS  _rx_rd_index0,R30
000348 93e0 0300 	STS  _rx_wr_index0,R30
00034a 93e0 0302 	STS  _rx_counter0,R30
00034c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00034d e0a1      	LDI  R26,LOW(1)
00034e e0b0      	LDI  R27,0
00034f 940c 01e3 	JMP  _send_respond
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000351 93fa      	ST   -Y,R31
000352 93ea      	ST   -Y,R30
                +
000353 eae5     +LDI R30 , LOW ( _request + ( 6 ) )
000354 e0f3     +LDI R31 , HIGH ( _request + ( 6 ) )
                 	__POINTW1MN _request,6
000355 93fa      	ST   -Y,R31
000356 93ea      	ST   -Y,R30
000357 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000358 9610      	adiw r26,0
000359 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00035a ea80     +LDI R24 , LOW ( 0xFA0 )
00035b e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00035c 9701     +SBIW R24 , 1
00035d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00035e 95a8      	wdr
00035f 9711      	sbiw r26,1
000360 f7c9      	brne __delay_ms0
                 __delay_ms1:
000361 9508      	ret
                 
                 __SAVELOCR4:
000362 933a      	ST   -Y,R19
                 __SAVELOCR3:
000363 932a      	ST   -Y,R18
                 __SAVELOCR2:
000364 931a      	ST   -Y,R17
000365 930a      	ST   -Y,R16
000366 9508      	RET
                 
                 __LOADLOCR4:
000367 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000368 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000369 8119      	LDD  R17,Y+1
00036a 8108      	LD   R16,Y
00036b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   4 r4 :   2 r5 :   4 r6 :   4 r7 :   5 
r8 :   4 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  17 r17:  42 r18:  14 r19:   5 r20:   0 r21:   0 r22:   8 r23:   5 
r24:  14 r25:   4 r26:  64 r27:  26 r28:  20 r29:   1 r30: 291 r31:  70 
x  :   9 y  : 121 z  :  13 
Registers used: 25 out of 35 (71.4%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   6 
adiw  :  18 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  10 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   1 brmi  :   0 brne  :  23 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  27 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   7 cln   :   0 
clr   :   8 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :   7 cpi   :  14 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   1 
in    :  10 inc   :   3 jmp   :  33 ld    :  26 ldd   :  23 ldi   : 124 
lds   :  25 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  20 movw  :  15 
mul   :   0 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   0 
ori   :   0 out   :  22 pop   :   8 push  :   8 rcall :  11 ret   :  16 
reti  :   2 rjmp  :  17 rol   :   0 ror   :   0 sbc   :   0 sbci  :   4 
sbi   :   1 sbic  :   2 sbis  :   0 sbiw  :  16 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   6 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  77 std   :  10 sts   :  56 sub   :   0 subi  :  16 swap  :   0 
tst   :   6 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006d8   1708     44   1752   32768   5.3%
[.dseg] 0x000100 0x000566      0    614    614    2048  30.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
